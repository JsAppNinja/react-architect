const TOASTS = [{
  text: 'Connection timed out. Showing limited messages.',
  action: {
    label: 'Retry',
    onClick: () => alert('You tried agian for some reason..'),
  },
}, {
  text: 'Sent',
  action: 'Undo'
}, {
  text: 'A voracious green ghost appears that passes through walls and leaves slime behind. What are you going to do?',
  action: {
    label: 'Call Ghostbusters',
    onClick: () => {
      setTimeout(resetGhostbustersTheme, 4000);
    },
    onAppear: startGhostbustersTheme,
  },
}];

export default class Snackbars extends Component {
  constructor(props) {
    super(props);

    this.shouldComponentUpdate = PureRenderMixin.shouldComponentUpdate.bind(this);
    this.state = { toasts: [] };
  }

  addToast = (text, action) => {
    this.setState({
      toasts: this.state.toasts.concat([{
        key: new Date().getTime() + '',
        text,
        action,
      }]),
    });
  }

  addToasts = () => {
    this.setState({
      toasts: this.state.toasts.concat(TOASTS.map(({ action, ...props }, i) => {
        if(typeof action !== 'string') {
          const { onClick } = action;
          action.onClick = () => {
            onClick && onClick();
            this.removeToast();
          };
        }

        return {
          key: new Date().getTime() + `-${i}`,
          action,
          ...props,
        };
      })),
    });
  }


  removeToast = () => {
    let toasts = this.state.toasts.slice();
    toasts.shift();
    this.setState({ toasts });
  }

  render() {
    return (
      <div>
        <RaisedButton
          primary
          onClick={this.addToast.bind(this, 'Hello, World!')}
          label="Toast hello world!"
        />,
        <RaisedButton
          primary
          onClick={this.addToast.bind(this, 'This is some long text to show the multiline feature of a toast. This requires an additional prop.')}
          label="Toast multiple lines"
        />
        <RaisedButton
          primary
          onClick={this.addToasts}
          label="Chained toasts"
        />
        <Snackbar
          toasts={toasts}
          dismiss={this.removeToast}
          multiline={isToasting && toast.text.length > 60}
          autohide={isToasting && TOASTS.filter(t => toast.text === t.text).length === 0}
        />
      </div>
    );
  }
}
