[{"description":"The `TabsContainer` component is used when you want to have your `Tabs` connected with\nthe `SwipeableViews`. This component will traverse the children subtree and extract out\nthe `children` from each tab, and render them in a swipeable container. However,\nsince this is using the `React.Children` traversal, You will have to keep the `Tabs`\nand `Tab` component as a direct decendent. You are unable to make a separate component\nthat encompasses the `Tab` component.\n\n```js\n// valid\n<TabsContainer>\n  <Tabs>\n    <Tab />\n  </Tabs>\n</TabsContainer>\n\n// invalid\n<TabsContainer>\n  <Tabs>\n    <MyCustomTab />\n  </Tabs>\n</TabsContainer>\n```\n\nThis is because it seems you are unable to access the `MyCustomTab`'s child Tab props correctly.\nYou can however have the tab's children as a separate component if you wish.","methods":[],"props":{"style":{"type":{"name":"object"},"required":false,"description":"An optional style to apply to the container."},"className":{"type":{"name":"string"},"required":false,"description":"An optional className to apply to the container."},"panelStyle":{"type":{"name":"object"},"required":false,"description":"An optional style to apply to each `TabPanel` that gets generated. Each tab's children\nwill get wrapped in a `TabPanel` component."},"panelClassName":{"type":{"name":"string"},"required":false,"description":"An optional className to apply to each each `TabPanel` that gets generated. Each tab's\nchildren will get wrapped in a `TabPanel` component."},"swipeableViewsStyle":{"type":{"name":"object"},"required":false,"description":""},"swipeableViewsClassName":{"type":{"name":"string"},"required":false,"description":""},"children":{"type":{"name":"element"},"required":true,"description":"This should be a `Tabs` component with children of `Tab`. This is used to figure out which\ntab's content is currently visible."},"component":{"type":{"name":"union","value":[{"name":"func"},{"name":"string"}]},"required":true,"description":"The component to render the container as.","defaultValue":{"value":"'header'","computed":false}},"panelComponent":{"type":{"name":"union","value":[{"name":"func"},{"name":"string"}]},"required":false,"description":"The component to render each `TabPanel` as."},"toolbar":{"type":{"name":"element"},"required":false,"description":"An optional toolbar to render above the tabs."},"activeTabIndex":{"type":{"name":"custom","raw":"controlled(PropTypes.number, 'onTabChange')"},"required":false,"description":"An optional active tab index to use. If this is defined, the component will be controlled\nand require the `onTabChange` prop to be defined."},"onTabChange":{"type":{"name":"func"},"required":false,"description":"An optional function to call when a new tab is seleced by swiping or clicking a tab. When\na new tab has been clicked, the callback will include the active tab index, the tab's `id`,\nthe tab's `controlsId`, the tab's `children`, and the click event.\n\nIf the tab was changed by swiping, it will only contain the new active tab index.\n\n```js\nonTabChange(newActiveTabIndex, tabId, tabControlsId, tabChildren, event);\n```"},"defaultTabIndex":{"type":{"name":"number"},"required":true,"description":"The default tab index to use when the component is uncontrolled.","defaultValue":{"value":"0","computed":false}},"colored":{"type":{"name":"bool"},"required":false,"description":"Boolean if the `toolbar` and `Tabs` should be cloned with `colored: true`."},"fixed":{"type":{"name":"bool"},"required":false,"description":"Boolean if the tabs and the optional toolbar should be fixed to the top of the page."},"labelAndIcon":{"type":{"name":"bool"},"required":false,"description":"A boolean if a `fixed` `TabsContainer` has tabs with a label and an icon."}},"source":"src/js/Tabs/TabsContainer.js","component":"TabsContainer"},{"description":"The `Tabs` component is used to manage the state of which tab is currently active.","methods":[],"props":{"tabId":{"type":{"name":"custom","raw":"isRequiredForA11y(PropTypes.oneOfType([\n  PropTypes.number,\n  PropTypes.string,\n]))"},"required":false,"description":"A base id to use for each `Tab`. When the child tabs are created, they are cloned\nwith some additional accessibility props. Each tab will get a prop with this and the\ncurrent index of the tab."},"style":{"type":{"name":"object"},"required":false,"description":"An optional style to apply."},"className":{"type":{"name":"string"},"required":false,"description":"An optional className to apply."},"component":{"type":{"name":"union","value":[{"name":"func"},{"name":"string"}]},"required":true,"description":"The component to render the tabs in.","defaultValue":{"value":"'ul'","computed":false}},"children":{"type":{"name":"union","value":[{"name":"element"},{"name":"arrayOf","value":{"name":"element"}}]},"required":true,"description":"This should either be a single `Tab` component or a list of `Tab` components. Unfortunately,\nthe child *must* be exactly a `Tab` component because this is unable to extract the correct\n`label` and `children` from a custom `Tab` component."},"centered":{"type":{"name":"bool"},"required":false,"description":"Boolean if the tabs should be centered instead of aligned to the keyline. The tabs will\nonly be aligned to the keyline when there are more than 3 tabs and the `alignToKeyline`\nprop is `false`."},"alignToKeyline":{"type":{"name":"bool"},"required":false,"description":"Boolean if the tabs should align to a toolbar's title keyline. If this is undefined,\nthe tabs will try to align to the keyline when there are more than 3 tabs."},"colored":{"type":{"name":"bool"},"required":false,"description":"Boolean if the tabs should be colored with the primary color. If this is false or undefined,\nthe tabs will be colored for the light or dark theme."},"overflowMenu":{"type":{"name":"bool"},"required":false,"description":"A boolean if the overflow tabs on desktop displays should appear in a menu. If this is false,\nthe additional tabs will be available by using pagination buttons."},"onTabChange":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the active tab is changed. The callback will include\nthe new active tab index and a click event.\n\n```js\nonTabChange(newTabIndex, event);\n```"},"activeTabIndex":{"type":{"name":"custom","raw":"controlled(PropTypes.number, 'onTabChange')"},"required":false,"description":"An optional active tab index to use. If this is defined, it will make the component controlled\nand require the `onTabChange` prop to be defined."},"defaultTabIndex":{"type":{"name":"number"},"required":true,"description":"The default tab index to use when the component is uncontrolled.","defaultValue":{"value":"0","computed":false}},"defaultMedia":{"type":{"name":"enum","value":[{"value":"'mobile'","computed":false},{"value":"'tablet'","computed":false},{"value":"'desktop'","computed":false}]},"required":true,"description":"The default media to render the tabs for. This is really just used for server side rendering.\nOnce the component has mounted, it will resize automatically.","defaultValue":{"value":"'mobile'","computed":false}},"desktopMinWidth":{"type":{"name":"number"},"required":true,"description":"The min width to use for rendering the tabs for desktops. mobile and tablet is not used\nbecause they share the same styles.","defaultValue":{"value":"DESKTOP_MIN_WIDTH","computed":true}},"nextIconChildren":{"type":{"name":"node"},"required":false,"description":"When the `overflowMenu` prop is false, this will be used to render the \"next slice of tabs\"\nwhen there are too many tabs to display at once on desktop screens.","defaultValue":{"value":"'keyboard_arrow_right'","computed":false}},"nextIconClassName":{"type":{"name":"string"},"required":false,"description":"When the `overflowMenu` prop is false, this will be used to render the \"next slice of tabs\"\nwhen there are too many tabs to display at once on desktop screens."},"previousIconChildren":{"type":{"name":"node"},"required":false,"description":"When the `overflowMenu` prop is false, this will be used to render the \"previous slice of tabs\"\nwhen there are too many tabs to display at once on desktop screens.","defaultValue":{"value":"'keyboard_arrow_left'","computed":false}},"previousIconClassName":{"type":{"name":"string"},"required":false,"description":"When the `overflowMenu` prop is false, this will be used to render the \"previous slice of tabs\"\nwhen there are too many tabs to display at once on desktop screens."},"overflowMenuLabel":{"type":{"name":"node"},"required":true,"description":"When the `overflowMenu` prop is true, this will be used to render the `MenuTab` overflow menu.\nThis will be the text that displays as a tab.","defaultValue":{"value":"'More'","computed":false}},"overflowMenuIconChildren":{"type":{"name":"node"},"required":false,"description":"When the `overflowMenu` prop is true, this will be used to render the `MenuTab` overflow menu.\nThis will be to render the icon to the right of the label.","defaultValue":{"value":"'arrow_drop_down'","computed":false}},"overflowMenuIconClassName":{"type":{"name":"string"},"required":false,"description":"When the `overflowMenu` prop is true, this will be used to render the `MenuTab` overflow menu.\nThis will be to render the icon to the right of the label."}},"source":"src/js/Tabs/Tabs.js","component":"Tabs"},{"description":"The `Tab` component is used for rendering a single tab in the `Tabs` component.\nIt can opionally have either a `label`, an `icon` or both.","methods":[],"props":{"id":{"type":{"name":"union","value":[{"name":"number"},{"name":"string"}]},"required":false,"description":"An id for the tab. This is required for a11y. If you use the `Tabs` component, this\nwill automatically be generated for you and injected into this component."},"controlsId":{"type":{"name":"union","value":[{"name":"number"},{"name":"string"}]},"required":false,"description":"An id for a `TabPanel` that holds the children from this tab. This is required for a11y.\nIf you use the `Tabs` component, this will automatically be generated for you and injected\ninto this component."},"style":{"type":{"name":"object"},"required":false,"description":"An optional style to apply."},"className":{"type":{"name":"string"},"required":false,"description":"An optional className to apply."},"component":{"type":{"name":"union","value":[{"name":"func"},{"name":"string"}]},"required":true,"description":"","defaultValue":{"value":"'li'","computed":false}},"children":{"type":{"name":"node"},"required":false,"description":"Any children to display once the tab has been selected."},"icon":{"type":{"name":"element"},"required":false,"description":"An optional icon to display in the tab. This can either be used alone, or it\nwill be placed above the `label` if both are given."},"label":{"type":{"name":"custom","raw":"oneRequired(PropTypes.node, 'icon')"},"required":false,"description":"An optional label to display in the tab. This can either be used alone, or it\nwill be placed below the `icon` if both are given."},"onClick":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the tab is clicked. The callback includes this tab's index,\nid, controlsId, children, and finally click event. All the additional parameters are included\nif you are not using the `TabsContainer` component. The `id` and `controlsId` are mainly passed\nfor accessibility.\n\n```js\nonClick(index, id, controlsId, children, event);\n```"},"active":{"type":{"name":"bool"},"required":false,"description":"Boolean if the tab is currently active. If you use the `Tabs` component, this is automatically\ninjected."},"index":{"type":{"name":"number"},"required":false,"description":"Boolean if the tab is currently active. If you use the `Tabs` component, this is automatically\ninjected."}},"source":"src/js/Tabs/Tab.js","component":"Tab"},{"description":"This component is just a simple accessibility wrapper when using tabs. If you use the\n`TabsContainer` component, you *should* not manually use this as the `TabsContainer`\ngenerates this for you.","methods":[],"props":{"id":{"type":{"name":"custom","raw":"isRequiredForA11y(PropTypes.oneOfType([\n  PropTypes.number,\n  PropTypes.string,\n]))"},"required":false,"description":"An id for the panel. This is used for a11y. This should equal the `controlsId`\nof whichever tab's children will be placed in here."},"controlledById":{"type":{"name":"custom","raw":"isRequiredForA11y(PropTypes.oneOfType([\n  PropTypes.number,\n  PropTypes.string,\n]))"},"required":false,"description":"An id for the tab that owns this panel. This should equal the `id` of whichever\ntab's children will be placed in here."},"style":{"type":{"name":"object"},"required":false,"description":"An optional style to apply."},"className":{"type":{"name":"string"},"required":false,"description":"An optional className to apply."},"component":{"type":{"name":"union","value":[{"name":"func"},{"name":"string"}]},"required":true,"description":"The component to render the panel as.","defaultValue":{"value":"'div'","computed":false}},"active":{"type":{"name":"bool"},"required":false,"description":"Boolean if the panel is currently active. This is used to generated the `aria-hidden`\nattribute."},"children":{"type":{"name":"node"},"required":false,"description":"Any children to display."}},"source":"src/js/Tabs/TabPanel.js","component":"TabPanel"},{"description":"The `MenuTab` component is used when there are too many desktop tabs\nto be displayed without any overflow. If the `Tabs` component is used,\nthis will automatically be included when the `menuOverflow` prop is true.","methods":[],"props":{"id":{"type":{"name":"custom","raw":"isRequiredForA11y(PropTypes.oneOfType([\n  PropTypes.number,\n  PropTypes.string,\n]))"},"required":false,"description":"An id to give the tab's menu."},"activeTabIndex":{"type":{"name":"number"},"required":true,"description":"The current active tab index. This is used to determine which list item\nis active in the menu, and if the styles for an active tab should be applied\nto the menu."},"overflowAtIndex":{"type":{"name":"number"},"required":true,"description":"An tab index that caused the overflow to happen."},"tabs":{"type":{"name":"arrayOf","value":{"name":"union","value":[{"name":"element"},{"name":"string"},{"name":"shape","value":{"divider":{"name":"bool","required":false},"subheader":{"name":"bool","required":false},"primaryText":{"name":"string","required":false}}}]}},"required":true,"description":"A list of tabs that should be rendered in the menu once opened. This can either\nbe:\n\n- a `ListItem`, `Divider`, or `Subheader` component\n- a string to use as the `primaryText` for a list item\n- an object that defines props to generate a `ListItem`, `Divider`, or `Subheader` component"},"style":{"type":{"name":"object"},"required":false,"description":"An optional style to apply to the menu."},"className":{"type":{"name":"string"},"required":false,"description":"An optional className to apply to the menu."},"tabStyle":{"type":{"name":"object"},"required":false,"description":"An optional style to apply to the tab in the menu."},"tabClassName":{"type":{"name":"string"},"required":false,"description":"An optional className to apply to the tab in the menu."},"onClick":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the tab is clicked."},"label":{"type":{"name":"node"},"required":true,"description":"The label to display in the tab. This should normally be some text with\na drop down arrow next to it."}},"source":"src/js/Tabs/MenuTab.js","component":"MenuTab"}]