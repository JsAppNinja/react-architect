[{"description":"The `Button` component can either be a `FlatButton`, `RaisedButton`, `IconButton`, or a\n`FloatingButton`.\n\nA `FlatButton` is a button with no depth on the screen that is ideally used in `Dialog`s\nor `CardActions`. The text can be optionally styled with the `primary` or `secondary` colors.\n\nA `RaisedButton` is a button with some depth to help actions have more prominene in flat\nlayouts or layouts with varying content. The background can be styled by the light/dark theme,\nor optionally the `primary` or `secondary` color.\n\nAn `IconButton` is a button that just displays a `FontIcon` as the child in a circle.\nThe `FontIcon` can be optionally styled with the `primary` or `secondary` color.\n\nA `FloatingButton` is a special case. Woop","methods":[],"props":{"label":{"type":{"name":"custom","raw":"(props, propName, component, ...others) => {\n  if (!props.icon && !props.floating) {\n    let err = PropTypes.string.isRequired(props, propName, component, ...others);\n    if (err) {\n      err = new Error(\n        `The required \\`${propName}\\` prop was not specified for a \\`${props.flat ? 'flat' : 'raised'}\\` ` +\n        'Button.'\n      );\n    }\n\n    return err;\n  } else if (PropTypes.string(props, propName, component, ...others)) {\n    return new Error(\n      `The \\`${propName}\\` prop was given for a \\`${props.icon ? 'icon' : 'floating'}\\` ` +\n      `Button. The \\`${propName}\\` prop can only be used on a \\`flat\\` or \\`raised\\` ` +\n      'Button.'\n    );\n  }\n\n  return null;\n}"},"required":false,"description":"A label to display on a `FlatButton` or a `RaisedButton`. This text can either\nbe placed before or after an optional `FontIcon` using the `iconBefore` prop.\nThis is required for `Flat` or `Raised` buttons. It is not allowed for `Icon`\nor `Floating` buttons. Use the `tooltipLabel` prop for `Icon` or `Floating` buttons."},"style":{"type":{"name":"object"},"required":false,"description":"An optional style to apply to the button."},"className":{"type":{"name":"string"},"required":false,"description":"An optional className to apply to the button."},"iconBefore":{"type":{"name":"bool"},"required":false,"description":"A boolean if the icon should appear before or after the text for a `FlatButton` or\na `RaisedButton`.","defaultValue":{"value":"true","computed":false}},"children":{"type":{"name":"custom","raw":"(props, propName, componentName, ...args) => {\n  const componentNameSafe = componentName || '<<anonymous>>';\n  let err = PropTypes.node(props, propName, componentName, ...args);\n\n  const icon = props.icon || props.floating;\n  const missing = !props.children && !props.iconClassName;\n  if (!err && icon && missing) {\n    err = new Error(\n      `You created an \\`${props.icon ? 'Icon' : 'Floating'}\\` ${componentNameSafe} without ` +\n      'having the correct props to generate an icon. Expected either the `children` prop or the ' +\n      `\\`iconClassName\\` prop but received children: \\`${props.children}\\` and iconClassName: ` +\n      `\\`${props.iconClassName}\\`.`\n    );\n  }\n\n  return err;\n}"},"required":false,"description":"Any children used to display a `FontIcon` in any version of the button. This will\nbe used with the `iconClassName` prop. If the `iconClassName` and the `children` prop\nare omitted, no icon will be added to the `RaisedButton` or `FlatButton`. An error\nwill be displayed for the `IconButton` or `FloatingButton`."},"iconClassName":{"type":{"name":"string"},"required":false,"description":"An icon className to use in an optional `FontIcon` in any version of the button. This will\nbe used with the `children` prop. IF the `floating` or `icon` props are set to true, this or\nthe children are required."},"type":{"type":{"name":"enum","value":[{"value":"'button'","computed":false},{"value":"'submit'","computed":false},{"value":"'reset'","computed":false}]},"required":true,"description":"The type for the button.","defaultValue":{"value":"'button'","computed":false}},"primary":{"type":{"name":"bool"},"required":false,"description":"Boolean if the button should be styled with the primary color."},"secondary":{"type":{"name":"bool"},"required":false,"description":"Boolean if the button should be styled with the secondary color."},"disabled":{"type":{"name":"bool"},"required":false,"description":"Boolean if the button is disabled."},"href":{"type":{"name":"string"},"required":false,"description":"An optional href for the button. This will style the `a` tag as a button."},"component":{"type":{"name":"func"},"required":false,"description":"An optional component to render the button as. This allows you to get all the styles and functionality\nof the Button, but as a custom React component."},"onClick":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the `click` event is triggered."},"onTouchStart":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the `touchstart` event is triggered."},"onTouchEnd":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the `touchend` event is triggered."},"onMouseDown":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the `mousedown` event is triggered."},"onMouseUp":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the `mouseup` event is triggered."},"onKeyUp":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the `keyup` event is triggered."},"onKeyDown":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the `keydown` event is triggered."},"onMouseOver":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the `mouseover` event is triggered."},"onMouseLeave":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the `mouseleave` event is triggered."},"fixed":{"type":{"name":"custom","raw":"floatingOnly(PropTypes.bool)"},"required":false,"description":"Boolean if the `FloatingButton` should be fixed to the page. This prop can\nonly be enabled if the `floating` prop is true."},"fixedPosition":{"type":{"name":"enum","value":[{"value":"'tr'","computed":false},{"value":"'tl'","computed":false},{"value":"'br'","computed":false},{"value":"'bl'","computed":false}]},"required":true,"description":"The position that the `FloatingButton` should be fixed to the page. It will\neither be fixed to the top right, top left, bottom right, or bottom left of\nthe page. This prop is ony used if the `floating` prop and `fixed` prop are\n`true`.","defaultValue":{"value":"'br'","computed":false}},"mini":{"type":{"name":"custom","raw":"floatingOnly(PropTypes.bool)"},"required":false,"description":"Boolean if the `FloatingButton` should be `mini`. This prop can only be used\nwhen the `floating` prop is true."},"flat":{"type":{"name":"bool"},"required":false,"description":"Boolean if the `Button` should be styled as a `FlatButton`."},"raised":{"type":{"name":"bool"},"required":false,"description":"Boolean if the `Button` should be styled as a `RaisedButton`."},"icon":{"type":{"name":"bool"},"required":false,"description":"Boolean if the `Button` should be styled as a `IconButton`."},"floating":{"type":{"name":"bool"},"required":false,"description":"Boolean if the `Button` should be styled as a `FloatingButton`."},"tooltipLabel":{"type":{"name":"string"},"required":false,"description":"An optional label to use for the tooltip. This is normally only used for\n`IconButton`s or `FloatingButton`s, but can be used on `FlatButton`s and\n`RaisedButton`s if you wish. Knock yourself out!\n\nIf this prop is omitted, no tooltip will be included."},"tooltipDelay":{"type":{"name":"number"},"required":false,"description":"An optional delay before the tooltip appears on mouse over."},"tooltipPosition":{"type":{"name":"enum","value":[{"value":"'top'","computed":false},{"value":"'right'","computed":false},{"value":"'bottom'","computed":false},{"value":"'left'","computed":false}]},"required":false,"description":"The position for the tooltip."}},"source":"src/js/Buttons/Button.js","component":"Button"}]