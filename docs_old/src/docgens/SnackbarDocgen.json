[{"description":"The `Snackbar` component is used for displaying a concise and small message to the user about\nan operation performed.\n\n> The main component for the `Snackbar` is actually named the `SnackbarContainer`, so you need\nto make sure the import is `react-md/lib/Snackbars` or `react-md/lib/Snackbars/SnackbarContainer`.\nThe first import is preferable.","methods":[],"props":{"id":{"type":{"name":"union","value":[{"name":"number"},{"name":"string"}]},"required":false,"description":"An id for the Snackbar once a toast has been added and is visible. This is a recommended\nprop for accessibility concerns. If it is ommitted, the id will become `'snackbarAlert'`\nwhen there is no action on the toast, or `'snackbarAlertDialog'` when there is an action\non the toast."},"style":{"type":{"name":"object"},"required":false,"description":"An optional style to apply to the snackbar once it appears."},"className":{"type":{"name":"string"},"required":false,"description":"An optional className to apply to the snackbar once it appears."},"toasts":{"type":{"name":"arrayOf","value":{"name":"shape","value":{"text":{"name":"string","description":"The text to display in the toast.","required":true},"action":{"name":"union","value":[{"name":"string"},{"name":"shape","value":{"onClick":{"name":"func","required":false},"label":{"name":"string","required":true}}}],"description":"An optional action to take. If this value is a string, the `label` for the\nbutton will be this value, Otherwise, all the keys in the action object will\nbe applied to the `Button`.","required":false}}}},"required":true,"description":"An immutable controlled queue of toasts that should appear in the snackbar.\nThe snackbar will always display the first toast in this list. When the user has\neither clicked the action of the toast, or the `autohideTimeout` has been reached,\nthe `onDismiss` function will be called. The `onDismiss` function should remove the\nthe first toast and return a new list of remaining toasts.\n\n```js\nlet toasts = [];\nconst onDismiss = () => {\n  const [, ...remainingToasts] = toasts;\n  toasts = remainingToasts;\n};\n```","defaultValue":{"value":"[]","computed":false}},"onDismiss":{"type":{"name":"func"},"required":true,"description":"A function to call that will dismiss a toast. This will automatically be bound to\nany toast that has an `action` and it will also be called when the `autohideTimeout`\nhas been reached."},"autohide":{"type":{"name":"bool"},"required":false,"description":"Boolean if the snackbar's toasts should automatically be dismissed after the\n`autohideTimeout` has been reached.","defaultValue":{"value":"true","computed":false}},"autohideTimeout":{"type":{"name":"number"},"required":true,"description":"The amount of time before the snackbar should be dequeued and the next toast\nshould be displayed.","defaultValue":{"value":"3000","computed":false}},"transitionEnterTimeout":{"type":{"name":"number"},"required":true,"description":"The transition time for the snackbar to enter. This should match the `$md-snackbar-transition-time`\nsass variable.","defaultValue":{"value":"300","computed":false}},"transitionLeaveTimeout":{"type":{"name":"number"},"required":true,"description":"The transition time for the snackbar to leave. This should match the `$md-snackbar-transition-time`\nsass variable.","defaultValue":{"value":"300","computed":false}},"fab":{"type":{"name":"custom","raw":"(props, propName, componentName, location, propFullName) => {\n  const propValue = props[propName];\n  const propType = typeof propValue;\n\n  if (!propValue) {\n    return null;\n  }\n\n  if (propType !== 'object' || typeof propValue.render !== 'function' || isInvalidAnimate(propValue)) {\n    const componentNameSafe = componentName || '<<anonymous>>';\n    const propFullNameSafe = propFullName || propName;\n    return new Error(\n      `Invalid ${location} \\`${propFullNameSafe}\\` supplied to \\`${componentNameSafe}\\`, expected a ` +\n      'ref to a floating `Button` component. This should not be a DOMElement from `findDOMNode` but instead ' +\n      'the React ref object.'\n    );\n  }\n\n  return null;\n}"},"required":false,"description":"When the app contains a floating action button that is fixed to the bottom of the screen,\nyou should set this to be a ref of the floating action button. When a snackbar appears,\nthe FAB will be moved to not overlay the snackbar."},"renderNode":{"type":{"name":"object"},"required":false,"description":""},"dismiss":{"type":{"name":"custom","raw":"deprecated(PropTypes.func, 'Use `onDismiss` instead')"},"required":false,"description":""}},"source":"src/js/Snackbars/SnackbarContainer.js","component":"SnackbarContainer"}]