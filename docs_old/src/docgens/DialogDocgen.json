[{"description":"","methods":[],"props":{"id":{"type":{"name":"custom","raw":"isRequiredForA11y(PropTypes.oneOfType([\n  PropTypes.number,\n  PropTypes.string,\n]))"},"required":false,"description":"An id to use for the `Dialog` once it has been opened. This is used for the\n[dialog role](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_dialog_role).\nThis is used to generate an `id` for the `title` prop when it has been defined."},"aria-describedby":{"type":{"name":"custom","raw":"oneRequiredForA11y(PropTypes.oneOfType([\n  PropTypes.number,\n  PropTypes.string,\n]), 'title', 'aria-labelledby', 'aria-label')"},"required":false,"description":"An optional accessibility prop to use when the `Dialog` is opened. This should be an id\npointing to some text that describes the content of the dialog. For accessibility\nreasons, one of the following props must be defined:\n- `title`\n- `aria-describedby`\n- `aria-labelledby`\n- `aria-label`\n\nAn example usage:\n\n```js\n<Dialog id=\"accessibleExample\" isOpen aria-describedby=\"accessibleContent\">\n  <p id=\"accessibleContent\">This is some content that describes the dialog.</p>\n</Dialog>\n```"},"aria-labelledby":{"type":{"name":"union","value":[{"name":"number"},{"name":"string"}]},"required":false,"description":"An optional accessibility prop to use when the `title` prop is not given. This should be\nan id pointing to a `h` tag that labels the dialog.\n\nAn example usage:\n\n```js\n<Dialog isOpen id=\"accessibleExample\" aria-labelledby=\"accessibleDialogLabel\">\n  <h2 id=\"accessibleDialogLabel\">Some Accessible Dialog</h2>\n</Dialog>\n```"},"aria-label":{"type":{"name":"string"},"required":false,"description":"An optional accessibility prop to use when the `title` and `aria-labelledby` props are\nnot defined. This should be a string that describes what is in the `Dialog`.\n\nAn example usage:\n\n```js\n<Dialog isOpen id=\"accessibleExample\" aria-label=\"Some Accessible Dialog\">\n  <p>Lorem Ipsum</p>\n</Dialog>\n```"},"style":{"type":{"name":"object"},"required":false,"description":"An optional style to apply to the dialog's container."},"className":{"type":{"name":"string"},"required":false,"description":"An optional className to apply to the dialog's container."},"dialogStyle":{"type":{"name":"object"},"required":false,"description":"An optional style to apply to the dialog itself when the `isOpen` prop is `true`."},"dialogClassName":{"type":{"name":"string"},"required":false,"description":"An optional className to apply to the dialog itself when the `isOpen` prop is `true`."},"contentStyle":{"type":{"name":"object"},"required":false,"description":"An optional style to apply to the dialog's content."},"contentClassName":{"type":{"name":"string"},"required":false,"description":"An optional className to apply to the dialog's content."},"component":{"type":{"name":"union","value":[{"name":"func"},{"name":"string"}]},"required":true,"description":"The component to render the dialog's container in.","defaultValue":{"value":"'span'","computed":false}},"contentComponent":{"type":{"name":"union","value":[{"name":"func"},{"name":"string"}]},"required":true,"description":"The component to render the dialog's content in.","defaultValue":{"value":"'section'","computed":false}},"children":{"type":{"name":"node"},"required":false,"description":"The content to display in the dialog once open."},"actions":{"type":{"name":"union","value":[{"name":"element"},{"name":"object"},{"name":"arrayOf","value":{"name":"union","value":[{"name":"element"},{"name":"object"}]}}]},"required":false,"description":"A single action or a list of actions to display in the dialog. This can either be a list\nof `FlatButton` props or `<Button flat {...props} />` elements."},"isOpen":{"type":{"name":"bool"},"required":true,"description":"Bolean if the `Dialog` is current open."},"onOpen":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the `isOpen` prop is changed from `false` to `true`."},"onClose":{"type":{"name":"func"},"required":true,"description":"A function to call that will close the dialog."},"modal":{"type":{"name":"bool"},"required":false,"description":"Boolean if the dialog should behave like a modal. This means that the dialog can only\nbe closed by clicking on an action instead of also clicking on the overlay."},"fullPage":{"type":{"name":"custom","raw":"(props, propName, componentName, ...args) => {\n  if (typeof props[propName] === 'undefined') {\n    return null;\n  }\n  const componentNameSafe = componentName || '<<anonymous>>';\n\n  let err = PropTypes.bool(props, propName, componentName, ...args);\n\n  if (!err && typeof props.title !== 'undefined') {\n    err = new Error(\n      `You provided a \\`title\\` ${location} to the \\`${componentNameSafe}\\` when \\`fullPage\\` ` +\n      'has been set to true. A title for a full page dialog should be rendered as a child instead.'\n    );\n  }\n\n  return err;\n}"},"required":false,"description":"Boolean if the dialog should be displayed as a full page dialog."},"pageX":{"type":{"name":"number"},"required":false,"description":"An optional pageX location to use when rendering a full page dialog. This is used to set the location\nthe dialog should appear from."},"pageY":{"type":{"name":"number"},"required":false,"description":"An optional pageY location to use when rendering a full page dialog. This is used to set the location\nthe dialog should appear from."},"focusOnMount":{"type":{"name":"bool"},"required":true,"description":"Boolean if the dialog should focus one of children once it has mounted.","defaultValue":{"value":"true","computed":false}},"transitionEnterTimeout":{"type":{"name":"number"},"required":true,"description":"The transition enter timeout for the dialog.","defaultValue":{"value":"300","computed":false}},"transitionLeaveTimeout":{"type":{"name":"number"},"required":true,"description":"The transition leave timeout for the dialog.","defaultValue":{"value":"300","computed":false}},"renderNode":{"type":{"name":"object"},"required":false,"description":"Since the `Dialog` uses the `Portal` component, you can pass an optional HTML Node to render\nthe dialog in instead of the `document.body`."},"transitionName":{"type":{"name":"custom","raw":"deprecated(PropTypes.string, 'The transition name will be managed by the component')"},"required":false,"description":""},"transitionEnter":{"type":{"name":"custom","raw":"deprecated(PropTypes.bool, 'The transition will always be enforced')"},"required":false,"description":""},"transitionLeave":{"type":{"name":"custom","raw":"deprecated(PropTypes.bool, 'The transition will always be enforced')"},"required":false,"description":""},"actionLeft":{"type":{"name":"custom","raw":"deprecated(PropTypes.node, 'Use the `fullPage` prop instead')"},"required":false,"description":""},"actionRight":{"type":{"name":"custom","raw":"deprecated(PropTypes.node, 'Use the `fullPage` prop instead')"},"required":false,"description":""},"close":{"type":{"name":"custom","raw":"deprecated(PropTypes.func, 'Use `onClose` instead.')"},"required":false,"description":""}},"source":"src/js/Dialogs/DialogContainer.js","component":"DialogContainer"}]