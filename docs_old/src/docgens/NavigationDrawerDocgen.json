[{"description":"The `NavigationDrawer` is used when you want a full layout configuration. It is a combination\nof the `Toolbar` component and the `Drawer` component.\n\nThe main benfit of using this component is that it will manage adding respective offset\nclasses automatically for you to the content and the drawer. It will also manage using\na mini drawer type for you.","methods":[],"props":{"style":{"type":{"name":"object"},"required":false,"description":"An optional style to apply to the surrounding container."},"className":{"type":{"name":"string"},"required":false,"description":"An optional className to apply to the surrounding container."},"toolbarStyle":{"type":{"name":"object"},"required":false,"description":"An optional style to apply to the main toolbar."},"toolbarClassName":{"type":{"name":"string"},"required":false,"description":"An optional className to apply to the toolbar."},"toolbarTitleStyle":{"type":{"name":"object"},"required":false,"description":"An optional style to apply to the main toolbar's title."},"toolbarTitleClassName":{"type":{"name":"string"},"required":false,"description":"An optional className to apply to the main toolbar's title."},"drawerStyle":{"type":{"name":"object"},"required":false,"description":"An optional style to apply to the drawer."},"drawerClassName":{"type":{"name":"string"},"required":false,"description":"An optional className to apply to the drawer."},"contentStyle":{"type":{"name":"object"},"required":false,"description":"An optional style to apply to the content. This is the container surrounding whatever\n`children` are passed in."},"contentClassName":{"type":{"name":"string"},"required":false,"description":"An optional className to apply to the content. This is the container surrounding whatever\n`children` are passed in."},"children":{"type":{"name":"node"},"required":false,"description":"The children to display in the main content."},"drawerHeader":{"type":{"name":"node"},"required":false,"description":"An optional header to display in the drawer. This will normally be the `Toolbar` component\nor any other type of header. You can either use this prop with the `CloseButton` component\nwhen displaying a persistent drawer, or use the `drawerTitle` and `drawerHeaderChildren` prop\nto build a toolbar."},"drawerTitle":{"type":{"name":"custom","raw":"invalidIf(PropTypes.node, 'drawerHeader')"},"required":false,"description":"An optional title to use for the drawer's header toolbar. If the `drawerHeader` prop is defined,\nthis is invalid."},"drawerHeaderChildren":{"type":{"name":"custom","raw":"invalidIf(PropTypes.node, 'drawerHeader')"},"required":false,"description":"Any additional children to display in the drawer's header `Toolbar`. If the `drawerHeader` prop is defined,\nthis is invalud."},"drawerChildren":{"type":{"name":"node"},"required":false,"description":"Any additional children to display after the `drawerHeader` and `navItems` list in the drawer."},"position":{"type":{"name":"enum","value":[{"value":"'left'","computed":false},{"value":"'right'","computed":false}]},"required":true,"description":"The position for the drawer to be displayed.","defaultValue":{"value":"Drawer.defaultProps.position","computed":true}},"navItems":{"type":{"name":"arrayOf","value":{"name":"union","value":[{"name":"element"},{"name":"shape","value":{"divider":{"name":"bool","required":false},"subheader":{"name":"bool","required":false},"primaryText":{"name":"string","required":false}}}]}},"required":false,"description":"An optional list of elements or props to use to build a navigational list in the drawer.\nWhen the item is an object of props, it will build a `ListItem` component unless a key of\n`divider` or `subheader` is set to true. It will then create the Divider or Subheader component\nwith any other remaining keys."},"mobileDrawerType":{"type":{"name":"enum","value":[{"value":"DrawerTypes.TEMPORARY","computed":true},{"value":"DrawerTypes.TEMPORARY_MINI","computed":true}]},"required":true,"description":"The drawer type to use for mobile devices.","defaultValue":{"value":"Drawer.defaultProps.mobileType","computed":true}},"tabletDrawerType":{"type":{"name":"enum","value":[{"value":"DrawerTypes.FULL_HEIGHT","computed":true},{"value":"DrawerTypes.CLIPPED","computed":true},{"value":"DrawerTypes.FLOATING","computed":true},{"value":"DrawerTypes.PERSISTENT","computed":true},{"value":"DrawerTypes.PERSISTENT_MINI","computed":true},{"value":"DrawerTypes.TEMPORARY","computed":true},{"value":"DrawerTypes.TEMPORARY_MINI","computed":true}]},"required":true,"description":"The drawer tye to use for tablets.","defaultValue":{"value":"Drawer.defaultProps.tabletType","computed":true}},"desktopDrawerType":{"type":{"name":"enum","value":[{"value":"DrawerTypes.FULL_HEIGHT","computed":true},{"value":"DrawerTypes.CLIPPED","computed":true},{"value":"DrawerTypes.FLOATING","computed":true},{"value":"DrawerTypes.PERSISTENT","computed":true},{"value":"DrawerTypes.PERSISTENT_MINI","computed":true},{"value":"DrawerTypes.TEMPORARY","computed":true},{"value":"DrawerTypes.TEMPORARY_MINI","computed":true}]},"required":true,"description":"The drawer type to use for desktop displays.","defaultValue":{"value":"Drawer.defaultProps.desktopType","computed":true}},"drawerType":{"type":{"name":"enum","value":[{"value":"DrawerTypes.FULL_HEIGHT","computed":true},{"value":"DrawerTypes.CLIPPED","computed":true},{"value":"DrawerTypes.FLOATING","computed":true},{"value":"DrawerTypes.PERSISTENT","computed":true},{"value":"DrawerTypes.PERSISTENT_MINI","computed":true},{"value":"DrawerTypes.TEMPORARY","computed":true},{"value":"DrawerTypes.TEMPORARY_MINI","computed":true}]},"required":false,"description":"An optional drawer type to enforce on all screen sizes. If the drawer type is not\n`temporary`, you are required to define the `onMediaTypeChange` prop to handle switching\nto temporary when the media matches a mobile device.\n```"},"defaultMedia":{"type":{"name":"enum","value":[{"value":"'mobile'","computed":false},{"value":"'tablet'","computed":false},{"value":"'desktop'","computed":false}]},"required":false,"description":"The default media match for the drawer. This will be what is displayed on first render.\nThe component will adjust itself to the current media after it has mounted, but this\nis mostly used for server side rendering.","defaultValue":{"value":"Drawer.defaultProps.defaultMedia","computed":true}},"mobileMinWidth":{"type":{"name":"number"},"required":true,"description":"The min width to use for a mobile media query. This prop should match the `md-mobile-min-width`\nvariable.\n\nThe media query for a mobile device will be:\n\n```js\nwindow.matchMedia(\n  `screen and (min-width: ${mobileMinWidth}px) and (max-width: ${tabletMinWidth - 1}px`\n).matches;\n```","defaultValue":{"value":"Drawer.defaultProps.mobileMinWidth","computed":true}},"tabletMinWidth":{"type":{"name":"number"},"required":true,"description":"The min width to use for a tablet media query. This prop should match the `md-tablet-min-width`\nvariable.\n\nThe media query for a tablet device will be:\n\n```js\nwindow.matchMedia(\n  `screen and (min-width: ${tabletMinWidth}px) and (max-width: ${desktopWidth - 1}px`\n).matches;\n```","defaultValue":{"value":"Drawer.defaultProps.tabletMinWidth","computed":true}},"desktopMinWidth":{"type":{"name":"number"},"required":true,"description":"The min width to use for a desktop media query. This prop should match the `md-desktop-min-width`\nvariable.\n\nThe media query for a tablet device will be:\n\n```js\nwindow.matchMedia(`screen and (min-width: ${tabletMinWidth}px)`).matches;\n```","defaultValue":{"value":"Drawer.defaultProps.desktopMinWidth","computed":true}},"renderNode":{"type":{"name":"object"},"required":false,"description":"An optional DOM Node to render the portal into. The default is to render as\nthe last child in the `body`."},"onMediaTypeChange":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the type of the drawer changes because of the\nnew media queries. The callback will include the newly selected drawer type\nand an object containing the media matches of `mobile`, `tablet`, and `desktop`.\n\n```js\nthis.props.onMediaTypeChange(NavigationDrawer.DrawerTypes.TEMPORARY, {\n  mobile: true,\n  tablet: false,\n  desktop: false,\n});\n```"},"defaultVisible":{"type":{"name":"bool"},"required":false,"description":"Boolean if the temporary or persistent drawers are visible by default."},"visible":{"type":{"name":"custom","raw":"controlled(PropTypes.bool, 'onVisibilityToggle', 'defaultVisible')"},"required":false,"description":"Boolean if the temporary or persistent drawers are visible. If this is defined,\nit will make the component controlled and require the `onVisibilityToggle` prop\nto be defined."},"onVisibilityToggle":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the visibility of the drawer changes. The callback\nwill include the new visibility and the event that triggered the change.\n\n```js\nthis.props.onVisibilityToggle(false, event);\n```"},"extractMini":{"type":{"name":"bool"},"required":false,"description":"A boolean if the mini drawer's list should be generated from the `navItems` prop. When building\nthe list, it will extract the `leftIcon` or `leftAvatar` from the `navItem` and then create a\nmini `ListItem` containing only that icon or image. Any other event listeners will also be applied.\n\n\n@see miniDrawerHeader\n@see miniDrawerChildren","defaultValue":{"value":"true","computed":false}},"miniDrawerHeader":{"type":{"name":"node"},"required":false,"description":"An optional header to display in the mini drawer. This will be displayed above the optional\nmini nav list that get generated if the `extractMini` prop is `true` and the `miniDrawerChildren`.\n\n@see extractMini"},"miniDrawerChildren":{"type":{"name":"node"},"required":false,"description":"Any additional children to display in the mini drawer. This will be displayed after the `miniDrawerHeader`\nand the optional mini nav list that gets generated if the `extractMini` prop is `true`.\n\n@see extractMini"},"autoclose":{"type":{"name":"bool"},"required":false,"description":"Boolean if the drawer should automatically close after a nav item has been clicked for `temporary` drawers.","defaultValue":{"value":"Drawer.defaultProps.autoclose","computed":true}},"toolbarTitle":{"type":{"name":"custom","raw":"invalidIf(PropTypes.node, 'toolbarTitleMenu')"},"required":false,"description":"An optional title to display in the main toolbar. Either the `toolbarTitle` or the `toolbarTitleMenu`\nmay be defined, not both."},"toolbarTitleMenu":{"type":{"name":"element"},"required":false,"description":"An optional select field menu to display in the main toolbar. Either the `toolbarTitle` or the `toolbarTitleMenu`\nmay be defined, not both."},"toolbarThemeType":{"type":{"name":"enum","value":[{"value":"'default'","computed":false},{"value":"'colored'","computed":false},{"value":"'themed'","computed":false}]},"required":true,"description":"The theme style for the main toolbar.\n\n@see [toolbars](/components/toolbars#prop-types-toolbar)","defaultValue":{"value":"'colored'","computed":false}},"toolbarSingleColor":{"type":{"name":"bool"},"required":false,"description":"Boolean if the toolbar's nav, actions, and title should share the same color."},"toolbarProminent":{"type":{"name":"bool"},"required":false,"description":"A boolean if the toolbar should be prominent."},"toolbarProminentTitle":{"type":{"name":"bool"},"required":false,"description":"A boolean if the toolbar's title should be prominent."},"toolbarActions":{"type":{"name":"custom","raw":"Toolbar.propTypes.actions"},"required":false,"description":"A list of elements or a single element to display to the right of the\ntoolbar's nav, title, and children.\n\n@see [toolbars](/components/toolbars#prop-types-toolbar)"},"toolbarChildren":{"type":{"name":"custom","raw":"Toolbar.propTypes.children"},"required":false,"description":"Any children to display in the toolbar. This will be displayed between the optional title and\nactions."},"contentComponent":{"type":{"name":"union","value":[{"name":"func"},{"name":"string"}]},"required":true,"description":"The component to render the content in.","defaultValue":{"value":"'main'","computed":false}},"footer":{"type":{"name":"node"},"required":false,"description":"An optional footer display after the main content."},"temporaryIconChildren":{"type":{"name":"node"},"required":false,"description":"Any children used to render a button that will toggle the visibility of the\nnavigation drawer for `temporary` and `persistent` drawers. This is normally a\nhamburger menu.","defaultValue":{"value":"'menu'","computed":false}},"temporaryIconClassName":{"type":{"name":"string"},"required":false,"description":"The icon className used to render a button that will toggle the visibility of the\nnavigation drawer for `temporary` and `persistent` drawers. This is normally a\nhamburger menu."},"persistentIconChildren":{"type":{"name":"node"},"required":false,"description":"Any children used to render a button that appears on a persistent drawer's open\nheader. This is used to create the `CloseButton` for drawers. When a persistent\ndrawer is closed, the `temporaryIconChildren` and `temporaryIconClassName` props\nwill be used to create a button to open the drawer.\n\nIf the `drawerHeader` prop is defined, you will have to either include the `CloseButton`\nin your header manually, or create your own controlled button to close the drawer.","defaultValue":{"value":"'arrow_back'","computed":false}},"persistentIconClassName":{"type":{"name":"string"},"required":false,"description":"The icon classNameused to render a button that appears on a persistent drawer's open\nheader. This is used to create the `CloseButton` for drawers. When a persistent\ndrawer is closed, the `temporaryIconChildren` and `temporaryIconClassName` props\nwill be used to create a button to open the drawer.\n\nIf the `drawerHeader` prop is defined, you will have to either include the `CloseButton`\nin your header manually, or create your own controlled button to close the drawer."},"transitionName":{"type":{"name":"string"},"required":true,"description":"The transition name to use when the page's content changes. If you want to disable\ntransitions, set both the `transitionEnterTimeout` and `transitionLeaveTimeout` props\nto a false-ish value. (`null`, `undefined`, or `0`).","defaultValue":{"value":"'md-cross-fade'","computed":false}},"transitionEnterTimeout":{"type":{"name":"number"},"required":false,"description":"The transition enter timeout when the page's content changes. If you want to disable\nthe enter transition, set this to a false-ish value (`null`, `undefined`, or `0`).","defaultValue":{"value":"300","computed":false}},"transitionLeaveTimeout":{"type":{"name":"number"},"required":false,"description":"The transition leave timeout when the page's content changes. If you want to disable\nthe leave transition, set this to a false-ish value (`null`, `undefined`, or `0`)."},"drawerTransitionDuration":{"type":{"name":"number"},"required":true,"description":"The transition duration for the drawer when sliding in and out of view.","defaultValue":{"value":"Drawer.defaultProps.transitionDuration","computed":true}},"menuIconChildren":{"type":{"name":"custom","raw":"deprecated(PropTypes.node, 'Use `temporaryIconChildren` instead')"},"required":false,"description":""},"menuIconClassName":{"type":{"name":"custom","raw":"deprecated(PropTypes.string, 'Use `temporaryIconClassName` instead')"},"required":false,"description":""},"closeIconChildren":{"type":{"name":"custom","raw":"deprecated(PropTypes.node, 'Use `persistentIconChildren` instead')"},"required":false,"description":""},"closeIconClassName":{"type":{"name":"custom","raw":"deprecated(PropTypes.string, 'Use `persistentIconClassName` instead')"},"required":false,"description":""},"onDrawerChange":{"type":{"name":"custom","raw":"deprecated(PropTypes.func, 'Use `onVisibilityToggle` or `onMediaTypeChange` instead')"},"required":false,"description":""},"contentTransitionName":{"type":{"name":"custom","raw":"deprecated(PropTypes.string, 'Use `transitionName` instead')"},"required":false,"description":""},"contentTransitionEnterTimeout":{"type":{"name":"custom","raw":"deprecated(PropTypes.number, 'Use `transtionEnterTimeout` instead')"},"required":false,"description":""},"contentTransitionLeaveTimeout":{"type":{"name":"custom","raw":"deprecated(PropTypes.number, 'Use `transtionLeaveTimeout` instead')"},"required":false,"description":""},"initialDrawerType":{"type":{"name":"custom","raw":"deprecated(\n  PropTypes.oneOf(['mobile', 'tablet', 'desktop']),\n  'Use `defaultMedia` instead'\n)"},"required":false,"description":""}},"source":"src/js/NavigationDrawers/NavigationDrawer.js","component":"NavigationDrawer"},{"description":"A button used to close the persistent navigation drawer. The button will\nbe generated based on the `NavigationDrawer`'s `contextTypes`.\n\nThis component is really only used if you are using a `persistent` drawer and you\nmanually created the `drawerHeader` for the `NavigationDrawer`.","methods":[],"props":{"className":{"type":{"name":"string"},"required":false,"description":"An optional className to apply."},"onClick":{"type":{"name":"func"},"required":false,"description":"An optional additional function to call when the `click` event is triggered."}},"source":"src/js/NavigationDrawers/CloseButton.js","component":"CloseButton"}]