[{"description":"The `TextField` component can either be a single line `input` field or a multiline\n`textarea` field. `FontIcon`s, messages, and password indicators can also be added\nto this field.\n\nThe optional mouse and touch events will be added to the entire container while the\ntext specific events will be added to the `input` or `textarea` tags.","methods":[{"name":"getField","docblock":"A helper function for getting the specific `input` field or the `textarea` in the `TextField`.\nThis is accessible if you use `refs`.\n\nExample:\n\n```js\n<TextField ref={field => this._field = field;} label=\"Hello\" />;\n\nthis._field.getField(); // `input` node\n```","modifiers":[],"params":[],"returns":null,"description":"A helper function for getting the specific `input` field or the `textarea` in the `TextField`.\nThis is accessible if you use `refs`.\n\nExample:\n\n```js\n<TextField ref={field => this._field = field;} label=\"Hello\" />;\n\nthis._field.getField(); // `input` node\n```"},{"name":"focus","docblock":"A helper function for focusing the `input` field or the `textarea` in the `TextField`.\nThis is accessibile if you use `refs`.\nExample:\n\n```js\n<TextField ref={field => this._field = field;} label=\"Hello\" />;\n\nthis._field.focus(); // `input` node\n```","modifiers":[],"params":[],"returns":null,"description":"A helper function for focusing the `input` field or the `textarea` in the `TextField`.\nThis is accessibile if you use `refs`.\nExample:\n\n```js\n<TextField ref={field => this._field = field;} label=\"Hello\" />;\n\nthis._field.focus(); // `input` node\n```"}],"props":{"style":{"type":{"name":"object"},"required":false,"description":"An optional style to apply to the text field's container."},"className":{"type":{"name":"string"},"required":false,"description":"An optional className to apply to the text field's container."},"inputStyle":{"type":{"name":"object"},"required":false,"description":"An optional style to apply to the `input` or `textarea` tag."},"inputClassName":{"type":{"name":"string"},"required":false,"description":"An optional className to apply to the `input` or `textarea` tag."},"value":{"type":{"name":"custom","raw":"controlled(PropTypes.oneOfType([\n  PropTypes.string,\n  PropTypes.number,\n]), 'onChange')"},"required":false,"description":"An optional value to apply to the text field. This will make the component\ncontrolled and require the `onChange` prop."},"defaultValue":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"required":false,"description":"An optional default value for the text field."},"block":{"type":{"name":"custom","raw":"(props, propName, component, ...others) => {\n  let err = PropTypes.bool(props, propName, component, ...others);\n  if (!err && props[propName] && props.label) {\n    err = new Error(\n      `The \\`${component}\\` is unable to have a \\`label\\` and be displayed as \\`block\\`. ` +\n      `If you would like a \\`label\\` for the block \\`${component}\\`, please use the \\`placeholder\\` prop.`\n    );\n  }\n\n  return err;\n}"},"required":false,"description":"Boolean if the text field should be displayed as a `block`. This is equivalent to\nthe `full width` text field in the Material Design specs. This view will disable\nfloating labels and remove the text divider from the component."},"paddedBlock":{"type":{"name":"bool"},"required":false,"description":"Boolean if the `block` text field should include padding to the left and right of\nthe text field.","defaultValue":{"value":"true","computed":false}},"disabled":{"type":{"name":"bool"},"required":false,"description":"Boolean if the text field is currently disabled."},"label":{"type":{"name":"string"},"required":false,"description":"An optional label to display with the text field. This will convert the text field\ninto a floating label text field. You can make it single line by only using the\n`placeholder` prop."},"placeholder":{"type":{"name":"string"},"required":false,"description":"An optional placeholder text to display in the text field. If there is no `label` prop,\nthe text field will be displayed as a single line text field. If there is a `label` prop,\nthis will only be visible when there is no value and the user focused the text field."},"id":{"type":{"name":"custom","raw":"(props, propName, component, ...others) => {\n  const validator = PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n  ]);\n  if (typeof props.label !== 'undefined') {\n    return isRequiredForA11y(validator)(props, propName, component, ...others);\n  }\n\n  return validator(props, propName, component, ...others);\n}"},"required":false,"description":"The id for the text field.  This is required for a11y if the `label` prop is defined."},"type":{"type":{"name":"enum","value":[{"value":"'text'","computed":false},{"value":"'number'","computed":false},{"value":"'email'","computed":false},{"value":"'search'","computed":false},{"value":"'tel'","computed":false},{"value":"'url'","computed":false},{"value":"'password'","computed":false}]},"required":true,"description":"The type for the text field.","defaultValue":{"value":"'text'","computed":false}},"onClick":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the text field's container triggers the `click` event."},"onDoubleClick":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the text field's container triggers the `doubleclick`\nevent."},"onTouchStart":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the text field's container triggers the `touchstart`\nevent."},"onTouchMove":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the text field's container triggers the `touchmove`\nevent."},"onTouchCancel":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the text field's container triggers the `touchcancel`\nevent."},"onTouchEnd":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the text field's container triggers the `touchend`\nevent."},"onMouseDown":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the text field's container triggers the `mousedown`\nevent."},"onMouseUp":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the text field's container triggers the `mouseup`\nevent."},"onMouseOver":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the text field's container triggers the `mouseover`\nevent."},"onMouseLeave":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the text field's container triggers the `mouseleave`\nevent."},"onChange":{"type":{"name":"func"},"required":false,"description":"An optional onChange function to call. If the `value` prop is true, this is\nrequired.\n\nWhen the value changes in the text field, this will be called with the new text\nfield's value and the change event.\n\n```js\nonChange(e.target.value, e);\n```"},"onFocus":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the text field is focused."},"onKeyDown":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the text field has the `keydown` event."},"active":{"type":{"name":"bool"},"required":false,"description":"An optional boolean if the `active` state of the text field can be externally\nmodified as well. The text field is usually considered active when it gains focus.\n\nIf this prop is set, it will check both the active prop and the active state to\ndetermine if one is true."},"error":{"type":{"name":"bool"},"required":false,"description":"An optional boolean if the `error` state of the text field can be externally\nmodified as well. The text field is usually considered errored when it is required\nand there is no value or the current length of the text field's value is greater\nthan the `maxLength` prop.\n\nIf this prop is set, it will check both the error prop and the error state to\ndetermine if one is true."},"floating":{"type":{"name":"bool"},"required":false,"description":"An optional boolean if the `floating` state of the text field's floating label can be\nexternally modified as well. The floating state is true when the tet field gains focus\nor there is a value in the text field.\n\nIf this prop is set, it will check both the floating prop and the floating state to\ndetermine if one is true."},"required":{"type":{"name":"bool"},"required":false,"description":"Boolean if the text field is required. If the user blurs the text field while there is\nno value and it is required, the `error` state will be set to true."},"lineDirection":{"type":{"name":"enum","value":[{"value":"'left'","computed":false},{"value":"'center'","computed":false},{"value":"'right'","computed":false}]},"required":true,"description":"The direction that the underline should appear from.","defaultValue":{"value":"'left'","computed":false}},"leftIcon":{"type":{"name":"element"},"required":false,"description":"An optional icon to place to the left of the text field."},"leftIconStateful":{"type":{"name":"bool"},"required":false,"description":"Boolean if the left icon should be stateful. This means that the icon will\ngain the active or error colors with the text field.","defaultValue":{"value":"true","computed":false}},"rightIcon":{"type":{"name":"element"},"required":false,"description":"An optional icon to place to the right of the text field."},"rightIconStateful":{"type":{"name":"bool"},"required":false,"description":"Boolean if the right icon should be stateful. This means that the icon will\ngain the active or error colors with the text field.","defaultValue":{"value":"true","computed":false}},"passwordIconChildren":{"type":{"name":"node"},"required":false,"description":"Any children used to display the password icon.","defaultValue":{"value":"'remove_red_eye'","computed":false}},"passwordIconClassName":{"type":{"name":"string"},"required":false,"description":"The icon className for the password icon."},"passwordInitiallyVisible":{"type":{"name":"bool"},"required":false,"description":"Boolean if the password is initially visible."},"fullWidth":{"type":{"name":"bool"},"required":false,"description":"Boolean if the text field should be displayed as full width.","defaultValue":{"value":"true","computed":false}},"rows":{"type":{"name":"custom","raw":"minNumber(2, false)"},"required":false,"description":"The number of rows for the `multiline` text field. This value must be greater than\nor equal to 2. When this value is set, the text field will be converted to a multiline\nfield."},"maxRows":{"type":{"name":"number"},"required":false,"description":"The maximum number of rows for a `multiline` text field. If this value is\n`undefined`, `0`, or a number less than `0`, the multiline text field will\ninfinitely expand."},"customSize":{"type":{"name":"string"},"required":false,"description":"An optional customsize to apply to the text field. This is used along with\nthe `$md-text-field-custom-sizes` variable. It basically applies a className of\n`md-text-field--NAME`."},"errorText":{"type":{"name":"string"},"required":false,"description":"An optional error text to display below the text field. This will only appear when\nthe text field has the `error` state through the `error` prop, the current length\nof the text field's value is greater than the `maxLength` prop, or the field is\nrequired and the user blurs the text field with no value."},"helpText":{"type":{"name":"string"},"required":false,"description":"An optional help text to display below the text field. This will always be visible\nunless the `helpOnFocus` prop is set to true. Otherwise it will appear on focus."},"helpOnFocus":{"type":{"name":"bool"},"required":false,"description":"Boolean if the help text should display on focus only."},"maxLength":{"type":{"name":"number"},"required":false,"description":"An optional max length for the text field. This will insert a counter underneath the\ntext field that appears on focus."},"inlineIndicator":{"type":{"name":"element"},"required":false,"description":"An optional element to display inside of the `TextField` to the farthest right. This will\nposition the indicator absolutely and add some additional padding to the `TextField`."},"icon":{"type":{"name":"custom","raw":"deprecated(PropTypes.node, 'Use the `leftIcon` or `rightIcon` prop instead')"},"required":false,"description":""},"floatingLabel":{"type":{"name":"custom","raw":"deprecated(\n  PropTypes.bool,\n  'The `label` prop is now always floating. To create a non-floating text field, only use the `placeholder` prop'\n)"},"required":false,"description":""},"adjustMinWidth":{"type":{"name":"custom","raw":"deprecated(PropTypes.bool, 'Manually add a min width style instead')"},"required":false,"description":""}},"source":"src/js/TextFields/TextField.js","component":"TextField"}]