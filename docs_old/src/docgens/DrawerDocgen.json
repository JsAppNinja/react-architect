[{"description":"The `Drawer` component is used for having a sliding panel of content or navigation\nthat appears from the side of a screen.\n\nIf the `Drawer` uses any of the `_MINI` drawer types, you will need to also create another\n`Drawer` that is not `_MINI`. Transitioning the `width` on mobile devices is very sluggish,\nand it isn't much more work to create another drawer.","methods":[],"props":{"style":{"type":{"name":"object"},"required":false,"description":"An optional style to apply."},"className":{"type":{"name":"string"},"required":false,"description":"An optional className to apply."},"navStyle":{"type":{"name":"object"},"required":false,"description":"An optional style to apply to the `List` surrounding the `navItems`."},"navClassName":{"type":{"name":"string"},"required":false,"description":"An optional className to apply to the `List` surrounding the `navItems`."},"component":{"type":{"name":"union","value":[{"name":"func"},{"name":"element"}]},"required":false,"description":"An optional component to render the drawer in. When this prop is undefined, the drawer\nwill be rendered as a `nav` if the `navItems` prop is defined, otherwise an `aside`."},"navItems":{"type":{"name":"arrayOf","value":{"name":"union","value":[{"name":"element"},{"name":"shape","value":{"divider":{"name":"bool","required":false},"subheader":{"name":"bool","required":false},"primaryText":{"name":"string","required":false}}}]}},"required":false,"description":"An optional list of navigation items to display in the drawer. This list can either contain\na valid child component for a `List` or an object used to create a `Divider`, `Subheader`,\nor `ListItem`.\n\n- To create a divider in the list, set a `divider` key to `true`. Any other keys will be\npassed to the `Divider` component.\n- To create a subheader in the list, set the `subheader` key to `true`. Any other keys will\nbe passed to the `Subheader` component.\n- To create a list item, just create an object with any normal `ListItem` props."},"autoclose":{"type":{"name":"bool"},"required":false,"description":"Boolean if a temporary drawer should close when a nav item is clicked.","defaultValue":{"value":"true","computed":false}},"header":{"type":{"name":"node"},"required":false,"description":"An optional header to display. This _should_ normally be a toolbar."},"children":{"type":{"name":"node"},"required":false,"description":"Any additional children to display after the `header` and `navItems`."},"mobileType":{"type":{"name":"enum","value":[{"value":"Drawer.DrawerTypes.TEMPORARY","computed":true},{"value":"Drawer.DrawerTypes.TEMPORARY_MINI","computed":true}]},"required":true,"description":"The drawer type to use when the current device matches the mobile\nmedia query.","defaultValue":{"value":"Drawer.DrawerTypes.TEMPORARY","computed":true}},"mobileMinWidth":{"type":{"name":"number"},"required":true,"description":"The min-width to use for the mobile media query.","defaultValue":{"value":"MOBILE_MIN_WIDTH","computed":true}},"tabletType":{"type":{"name":"custom","raw":"oneOfDrawerTypes.isRequired"},"required":false,"description":"The drawer type to use when the current device matches the tablet\nmedia query.","defaultValue":{"value":"Drawer.DrawerTypes.PERSISTENT","computed":true}},"tabletMinWidth":{"type":{"name":"number"},"required":true,"description":"The min-width to use for the tablet media query.","defaultValue":{"value":"TABLET_MIN_WIDTH","computed":true}},"desktopType":{"type":{"name":"custom","raw":"oneOfDrawerTypes.isRequired"},"required":false,"description":"The drawer type to use when the current device matches the desktop media\nquery.","defaultValue":{"value":"Drawer.DrawerTypes.FULL_HEIGHT","computed":true}},"desktopMinWidth":{"type":{"name":"number"},"required":true,"description":"The min-width for a desktop screen.","defaultValue":{"value":"DESKTOP_MIN_WIDTH","computed":true}},"type":{"type":{"name":"custom","raw":"(props, propName, component, ...others) => {\n  const type = props[propName];\n  if (isTemporary(type)) {\n    return oneOfDrawerTypes(props, propName, component, ...others);\n  }\n\n  let err = oneOfDrawerTypes(props, propName, component, ...others);\n  if (!err && typeof type !== 'undefined' && !isMini(type) && typeof props.onMediaTypeChange === 'undefined') {\n    err = new Error(\n      `You provided a \\`${propName}\\` prop to the ${component} without the \\`onMediaTypeChange\\` ` +\n      `handler. The \\`onMediaTypeChange\\` prop must be specified when the \\`${propName}\\` is not ` +\n      'one of the `temporary` types.'\n    );\n  }\n\n  return err;\n}"},"required":false,"description":"An optional type to enforce across all media sizes. Since `mobile` devices are\nincluded, you are required to manually specify when the `type` should be `temporary`.\n\nWhen the `type` is not one of the `temporary` types, the `onMediaTypeChange` prop\nmust be provided."},"onMediaTypeChange":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the drawer's type changes when the screen resizes.\nThe callback will include the new `type` that should be used for the screen size,\nand an object containing the media matches for `mobile`, `tablet`, and `desktop`.\n\n```js\nthis.props.onMediaTypeChange(Drawer.DrawerTypes.TEMPORARY, {\n  mobile: true,\n  tablet: false,\n  desktop: false,\n});\n```"},"defaultMedia":{"type":{"name":"enum","value":[{"value":"'mobile'","computed":false},{"value":"'tablet'","computed":false},{"value":"'desktop'","computed":false}]},"required":true,"description":"The default drawer type to display on initial render. The drawer will automatically\nadjust itself to the correct media once it has mounted. This prop is really only useful\nfor server side rendering.","defaultValue":{"value":"'mobile'","computed":false}},"overlay":{"type":{"name":"bool"},"required":false,"description":"Boolean if there should be a visible overlay when the drawer is visible. The default behavior\nis to only include a visible overlay when the `type` is `TEMPORARY` or `TEMPORARY_MINI` and\nthe device is not a desktop."},"renderNode":{"type":{"name":"object"},"required":false,"description":"An optional DOM Node to render the drawer into. The default is to render as\nthe last child in the `body`."},"defaultVisible":{"type":{"name":"bool"},"required":false,"description":"Boolean if the drawer is visible by default. If this is omitted, the drawer will be visible\nif the current drawer type is NOT `Drawer.DrawerTypes.TEMPORARY` or `Drawer.DrawerTypes.TEMPORARY_MINI`.\n\nThis basically means that if you are using the default configuration, a mobile device's drawer\nwill be hidden while tablets and desktops will be visible."},"visible":{"type":{"name":"custom","raw":"controlled(PropTypes.bool, 'onVisibilityToggle', 'defaultVisible')"},"required":false,"description":"Boolean if the drawer is visible. This will force the component to define the `onVisibilityToggle`\nprop as well as manually updating the drawer's visibility."},"onVisibilityToggle":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the visibility of the drawer is changed. The function will\nbe called with the new visibility state and an event that triggered the visibility change.\n\n```js\nonVisibilityToggle(!currentlyVisible, event);\n```"},"position":{"type":{"name":"enum","value":[{"value":"'left'","computed":false},{"value":"'right'","computed":false}]},"required":true,"description":"The drawer's position on the page when it is not `inline`. When the drawer's position is `left`,\nthe width will be `calc(100vw - 56px)` on mobile devices and `$md-drawer-desktop-width` on desktops.\n\nWhen the position is `right`, the width will be `100vw` for mobile devices and scaling to the drawer's\nchildren width on desktops.","defaultValue":{"value":"'left'","computed":false}},"inline":{"type":{"name":"bool"},"required":false,"description":"Boolean if the drawer should be displayed inline instead of fixed to the page. When this prop\nis enabled, the `position` prop will not be used."},"transitionDuration":{"type":{"name":"number"},"required":true,"description":"The `$md-drawer-transition-time` value from sass.","defaultValue":{"value":"300","computed":false}}},"source":"src/js/Drawers/Drawer.js","component":"Drawer"}]