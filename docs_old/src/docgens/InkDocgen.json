[{"description":"Takes any component and injects an ink container for having the Material Design Ink effect.\n\nThe default triggers for an ink are:\n- mouse down event\n- touch start event\n- keyboard focus\n- form submit\n\nThe form submit ink will only be triggered if the `ComposedComponent` has the attribute\n`type=\"submit\"`, the `ComposedComponent` is in a form, and the user hits the `enter` key\nwhile not actively focusing the `ComposedComponent`.\n\n```js\n@param {function} ComposedComponent - The React Component to inject an `ink` prop into.\n@return {function} a new React class rendering the `ComposedComponent` and adding an\n   `ink` pop.\n```","methods":[{"name":"createInk","docblock":"A publically accessible way to manually create an ink. This can be used with the `refs`.\nThe ink can either be created by using the `pageX` and `pageY` from a click/touch event\nor it will be created in the center of the `ComposedComponent`.\n\n```js\n<SomeInkedComponent ref={inkHOC => inkHOC.createInk()} />\n```\n\n@param {number=} pageX - An optional pageX of the click or touch event.\n@param {number=} pageY - An optional pageY of the click or touch event.","modifiers":[],"params":[{"name":"pageX","description":"An optional pageX of the click or touch event.","type":{"name":"number"},"optional":true},{"name":"pageY","description":"An optional pageY of the click or touch event.","type":{"name":"number"},"optional":true}],"returns":null,"description":"A publically accessible way to manually create an ink. This can be used with the `refs`.\nThe ink can either be created by using the `pageX` and `pageY` from a click/touch event\nor it will be created in the center of the `ComposedComponent`.\n\n```js\n<SomeInkedComponent ref={inkHOC => inkHOC.createInk()} />\n```"},{"name":"focus","docblock":"This will attempt to focus the composed component. If the component is disabled, nothing\nwill happen. If the `disabled` and `inkDisabled` props are not set to `true`, an ink will\nalso be created.\n\n```js\n<SomeInkedComponent ref={inkHOC => inkHOC.focus()} />\n```","modifiers":[],"params":[],"returns":null,"description":"This will attempt to focus the composed component. If the component is disabled, nothing\nwill happen. If the `disabled` and `inkDisabled` props are not set to `true`, an ink will\nalso be created.\n\n```js\n<SomeInkedComponent ref={inkHOC => inkHOC.focus()} />\n```"},{"name":"getComposedComponent","docblock":"Gets the composed component as a ref. This is usefull if you need to access the ref of the\ncomposed component instead of the `injectInk` HOC to use some publically accessible methods.\n\n```js\n<SomeInkedComponent\n  ref={inkHOC => {\n    inkHOC.getComposedComponent().focus();\n  }}\n/>\n```","modifiers":[],"params":[],"returns":null,"description":"Gets the composed component as a ref. This is usefull if you need to access the ref of the\ncomposed component instead of the `injectInk` HOC to use some publically accessible methods.\n\n```js\n<SomeInkedComponent\n  ref={inkHOC => {\n    inkHOC.getComposedComponent().focus();\n  }}\n/>\n```"}],"props":{"inkStyle":{"type":{"name":"object"},"required":false,"description":"An optional style to apply to each ink that gets generated."},"inkClassName":{"type":{"name":"string"},"required":false,"description":"An optional className to apply to each ink that gets generated."},"inkContainerStyle":{"type":{"name":"object"},"required":false,"description":"An optional style to apply to the ink's container."},"inkContainerClassName":{"type":{"name":"string"},"required":false,"description":"An optional className to apply to the ink's container."},"disabled":{"type":{"name":"bool"},"required":false,"description":"Boolean if the composed component or the ink is disabled."},"inkDisabled":{"type":{"name":"bool"},"required":false,"description":"Boolean if only the ink is disabled for the composed component."},"inkTransitionOverlap":{"type":{"name":"number"},"required":true,"description":"The time (in ms) that the enter and leave transitions for the ink should overlap.\nThis really just allows for a more _fluid_ looking ink when something is quickly\ntouched or clicked by having it fade out while growing.","defaultValue":{"value":"150","computed":false}},"inkTransitionEnterTimeout":{"type":{"name":"number"},"required":true,"description":"The transition time for the ink to be considered fully entered. This should really\nmap up to whatever value you set for `$md-ink-enter-transition-time`.","defaultValue":{"value":"450","computed":false}},"inkTransitionLeaveTimeout":{"type":{"name":"number"},"required":true,"description":"The transition time for the ink to be considered fully leaved (left?). This should really\nmap up to whatever value you set for `$md-ink-leave-transition-time`.","defaultValue":{"value":"300","computed":false}},"waitForInkTransition":{"type":{"name":"bool"},"required":false,"description":"Boolean if the `ComposedComponent`'s click event only after the ink has finished transitioning\nin and out. This is really only to get a more _fluid_ looking click event when clicking on\nthe `ComposedComponent` ends up taking it out of the view. (ex: Closing a Dialog)."},"disabledInteractions":{"type":{"name":"arrayOf","value":{"name":"enum","value":[{"value":"'keyboard'","computed":false},{"value":"'mouse'","computed":false},{"value":"'touch'","computed":false}]}},"required":false,"description":"An optional array of interactions that can be disabled for the ink. This is a *very* limited\nuse case where `Switches` needed the ink disabled only when using a mouse."}},"source":"src/js/Inks/injectInk.js","component":"Ink"}]