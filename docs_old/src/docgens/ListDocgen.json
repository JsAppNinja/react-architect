[{"description":"Lists present multiple line items vertically as a single continuous element.","methods":[],"props":{"style":{"type":{"name":"object"},"required":false,"description":"An optional style to apply to the list."},"className":{"type":{"name":"string"},"required":false,"description":"An optional className to apply to the list."},"ordered":{"type":{"name":"bool"},"required":false,"description":"Boolean if this should be an ordered list (`<ol>`) component. Otherwise, it will\nbe rendered as `<ul>`."},"children":{"type":{"name":"node"},"required":false,"description":"This *should* be a list of `ListItem`, `ListItemControl`, `Divider`, or\n`Subheader`."},"subheader":{"type":{"name":"custom","raw":"deprecated(PropTypes.string, 'Use the `Subheader` component as a child instead')"},"required":false,"description":""},"primarySubheader":{"type":{"name":"custom","raw":"deprecated(PropTypes.bool, 'Use the `Subheader` component as a child instead')"},"required":false,"description":""}},"source":"src/js/Lists/List.js","component":"List"},{"description":"The `ListItem` component is used for rendering a `li` tag with text and optional\nicons/avatars.","methods":[{"name":"focus","docblock":"A utility function to focus the `AccessibleFakeInkedButton` in the `ListItem` and also\ninject an ink to indicate focus.","modifiers":[],"params":[],"returns":null,"description":"A utility function to focus the `AccessibleFakeInkedButton` in the `ListItem` and also\ninject an ink to indicate focus."}],"props":{"style":{"type":{"name":"object"},"required":false,"description":"An optional style to apply to the `li` tag."},"className":{"type":{"name":"string"},"required":false,"description":"An optional className to apply to the `li` tag."},"tileStyle":{"type":{"name":"object"},"required":false,"description":"An optional style to apply to the `.md-list-tile`.\n\n@see component"},"tileClassName":{"type":{"name":"string"},"required":false,"description":"An optional className to apply to the `.md-list-tile`.\n\n@see component"},"children":{"type":{"name":"node"},"required":false,"description":"Any additional children to display in the `.md-list-tile`. If you use this prop,\nyou will most likely need to override the `height` for the `.md-list-tile--icon`,\n`.md-list-tile--avatar`, `.md-list-tile--two-lines`, and/or `.md-list-tile--three-lines`\nto get it to display correctly unless the children are positioned `absolute`."},"disabled":{"type":{"name":"bool"},"required":false,"description":"Boolean if the `ListItem` is disabled."},"tabIndex":{"type":{"name":"number"},"required":false,"description":"An optional tab index for the `.md-list-tile`. If omitted, it will default to the\n`AccessibleFakeButton`'s `tabIndex` default prop value."},"primaryText":{"type":{"name":"node"},"required":true,"description":"The primary text to display. This will only be rendered as a single line. Any overflown\ntext will be converted to ellipsis."},"secondaryText":{"type":{"name":"node"},"required":false,"description":"An optional secondary text to display below the `primaryText`. This can be an additional\none or two lines. Like the `primaryText`, and overflown text will be converted to ellipsis.\n\nYou must set the `threeLines` prop to `true` if you want this to be displayed as two lines."},"leftIcon":{"type":{"name":"node"},"required":false,"description":"An optional `FontIcon` to display to the left of the text."},"inset":{"type":{"name":"bool"},"required":false,"description":"Boolean if the list item should be inset as if there is a `leftIcon` or a `leftAvatar`.\nThis is used for some lists where only a parent contains the icon."},"leftAvatar":{"type":{"name":"node"},"required":false,"description":"An optional `Avatar` to display to the left of the text. If you have a mixed `List` of\n`FontIcon` and `Avatar`, it is recommended to set the `iconSized` prop on the `Avatar` to\n`true` so that the `Avatar` will be scaled down to the `FontIcon` size."},"rightIcon":{"type":{"name":"node"},"required":false,"description":"An optional `FontIcon` to display to the right of the text."},"rightAvatar":{"type":{"name":"node"},"required":false,"description":"An optional `Avatar` to display to the right of the text. If you have a mixed `List` of\n`FontIcon` and `Avatar`, it is recommended to set the `iconSized` prop on the `Avatar` to\n`true` so that the `Avatar` will be scaled down to the `FontIcon` size."},"threeLines":{"type":{"name":"bool"},"required":false,"description":"Boolean if the `secondaryText` should span two lines instead of one. This will include\nthree lines of text in total when including the `primaryText`."},"component":{"type":{"name":"union","value":[{"name":"string"},{"name":"func"}]},"required":true,"description":"An optional component to render the `.md-list-tile` as. This is mostly useful if you\nwant to use the `ListItem` for navigation and working with the `react-router`'s `Link`\ncomponent.","defaultValue":{"value":"'div'","computed":false}},"nestedItems":{"type":{"name":"arrayOf","value":{"name":"node"}},"required":false,"description":"An optional list of `ListItem`, `ListItemControl`, `Divider`, or `Subheader` components\nto render in a nested list. This will inject an expander icon to the right of the text\nin the `.md-list-tile` that rotates 180 degrees when open.\n\nThe nested items will be visible once the user clicks on the `ListItem`.\n\n@see `defaultOpen`\n@see `isOpen`"},"defaultOpen":{"type":{"name":"bool"},"required":false,"description":"Boolean if the `nestedItems` are visible by default."},"isOpen":{"type":{"name":"custom","raw":"controlled(PropTypes.bool, 'onClick')"},"required":false,"description":"Boolean if the `nestedItems` are visible. This will make the `nestedItems` controlled\nand require the `onClick` function to be defined."},"expanderIconChildren":{"type":{"name":"node"},"required":false,"description":"Any children used to render the expander icon.","defaultValue":{"value":"'keyboard_arrow_down'","computed":false}},"expanderIconClassName":{"type":{"name":"string"},"required":false,"description":"An icon className to use to render the expander icon."},"onClick":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the `.md-list-tile` is clicked. This is required if the\n`isOpen` prop is defined."},"onMouseOver":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the `.md-list-tile` triggers the `mouseover` event."},"onMouseLeave":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the `.md-list-tile` triggers the `mouseleave` event."},"onTouchStart":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the `.md-list-tile` triggers the `touchstart` event."},"onTouchEnd":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the `.md-list-tile` triggers the `touchend` event."},"onKeyDown":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the `.md-list-tile` triggers the `keydown` event."},"onKeyUp":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the `.md-list-tile` triggers the `keyup` event."},"active":{"type":{"name":"bool"},"required":false,"description":"Boolean if the `ListItem` is currently active. This will apply the `activeClassName` prop\nto the `leftIcon`, `rightIcon`, and the `primaryText`."},"activeClassName":{"type":{"name":"string"},"required":false,"description":"The className to apply to the `leftIcon`, `rightIcon`, and `primaryText` when the `active`\nprop is `true`.","defaultValue":{"value":"'md-color--primary'","computed":false}},"initiallyOpen":{"type":{"name":"custom","raw":"deprecated(PropTypes.bool, 'Use `defaultOpen` instead')"},"required":false,"description":""}},"source":"src/js/Lists/ListItem.js","component":"ListItem"}]