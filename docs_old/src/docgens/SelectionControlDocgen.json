[{"description":"The `SelectionControl` component is used to render any of the `Radio`, `Checkbox`, or `Switch`\nselection control type. This component might eventually replace all three since they use this\nanyways. I am not sure yet though.","methods":[],"props":{"id":{"type":{"name":"custom","raw":"preventDouble(isRequiredForA11y(PropTypes.oneOfType([\n  PropTypes.string,\n  PropTypes.number,\n])))"},"required":false,"description":"An id to use with the selection control. This is used for accessibility and so that the label\ntriggers the selection control toggle."},"style":{"type":{"name":"object"},"required":false,"description":"An optional style to apply to the selection control's container."},"className":{"type":{"name":"string"},"required":false,"description":"An optional className to apply to the selection control's container."},"type":{"type":{"name":"enum","value":[{"value":"'checkbox'","computed":false},{"value":"'radio'","computed":false},{"value":"'switch'","computed":false}]},"required":true,"description":"The type of selection control to render."},"label":{"type":{"name":"node"},"required":false,"description":"A label to display with the selection control. This is required for accessibility and triggering\nthe toggle."},"labelBefore":{"type":{"name":"bool"},"required":false,"description":"Boolean if the label should appear before the checkbox/radio icon or switch."},"name":{"type":{"name":"custom","raw":"preventDouble(isRequiredForA11y(PropTypes.oneOfType([\n  PropTypes.number,\n  PropTypes.string,\n])))"},"required":false,"description":"A name to use for the `SelectionControl`. This is required for accessibility. If the `type`\nis a `checkbox` and it is part of a group, it is recommended to make this a string ending\nin `[]` so that the value can be found from `document.querySelector('input[name=\"someName[]\"]').value`."},"disabled":{"type":{"name":"bool"},"required":false,"description":"Boolean if the `Radio` is disabled."},"onChange":{"type":{"name":"func"},"required":false,"description":"A function to call when the `SelectionControl` triggers the `change` event. The `onChange`\ncallback will either include:\n- the currently changed radio's value\n- the next checked state for the `Switch` or `Checkbox`.\n\nas the first paramater followed by the change event.\n\n```js\n// Radio\nonChange(changeEvent.target.value, changeEvent);\n\n// Checkbox or Switch\nonChange(changeEvent.target.checked, changeEvent);\n```"},"onBlur":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the `SelectionControl` triggers the `blur` event."},"onFocus":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the `SelectionControl` triggers the `focus` event."},"value":{"type":{"name":"union","value":[{"name":"number"},{"name":"string"}]},"required":false,"description":"The value for the `SelectionControl`. It is not required for `Checkbox` and `Switch`,\nbut it is recommended."},"checked":{"type":{"name":"bool"},"required":false,"description":"A boolean if the `SelectionControl` is currently checked. This _really_ makes the `onChange`\nprop required, but since there are cases you might want to have the `onChange` listener on a\n`fieldset` or something above the component, it is never set to `required`. It will however\nprevent updates if there is no change listener."},"defaultChecked":{"type":{"name":"bool"},"required":false,"description":"Boolean if the `Checkbox` or `Switch` are checked by default. This prop is invalid for a\n`Radio`."},"inline":{"type":{"name":"bool"},"required":false,"description":"Boolean if the `SelectionControl` should be displayed inline instead of a block."},"checkedCheckboxIconChildren":{"type":{"name":"node"},"required":false,"description":"Any children used to render the checkbox checked `FontIcon`.","defaultValue":{"value":"'check_box'","computed":false}},"checkedCheckboxIconClassName":{"type":{"name":"string"},"required":false,"description":"An icon className to use to render the checkbox checked `FontIcon`."},"uncheckedCheckboxIconChildren":{"type":{"name":"node"},"required":false,"description":"Any children used to render the checkbox unchecked `FontIcon`.","defaultValue":{"value":"'check_box_outline_blank'","computed":false}},"uncheckedCheckboxIconClassName":{"type":{"name":"string"},"required":false,"description":"An icon className to use to render the checkbox unchecked `FontIcon`."},"checkedRadioIconChildren":{"type":{"name":"node"},"required":false,"description":"Any children used to render the radio checked `FontIcon`.","defaultValue":{"value":"'radio_button_checked'","computed":false}},"checkedRadioIconClassName":{"type":{"name":"string"},"required":false,"description":"An icon className to use to render the radio checked `FontIcon`."},"uncheckedRadioIconChildren":{"type":{"name":"node"},"required":false,"description":"Any children used to render the radio unchecked `FontIcon`.","defaultValue":{"value":"'radio_button_unchecked'","computed":false}},"uncheckedRadioIconClassName":{"type":{"name":"string"},"required":false,"description":"An icon className to use to render the radio unchecked `FontIcon`."},"checkedIcon":{"type":{"name":"custom","raw":"preventDouble(deprecated(\n  PropTypes.node,\n  'Use the `checkedCheckboxIconChildren` and `checkedCheckboxIconClassName`  or the ' +\n  '`checkedRadioIconChildren` and `checkedRadioIconClassName` props instead'\n))"},"required":false,"description":""},"uncheckedIcon":{"type":{"name":"custom","raw":"preventDouble(deprecated(\n  PropTypes.node,\n  'Use the `uncheckedCheckboxIconChildren` and `uncheckedCheckboxIconClassName`  or the ' +\n  '`uncheckedRadioIconChildren` and `uncheckedRadioIconClassName` props instead'\n))"},"required":false,"description":""}},"source":"src/js/SelectionControls/SelectionControl.js","component":"SelectionControl"},{"description":"The `SelectionControlGroup` component is used to simplify the generation of a list\nof `SelectionControl`. Any common props are extracted to this component and passed\nto the `SelectionControl`.","methods":[],"props":{"style":{"type":{"name":"object"},"required":false,"description":"An optional style to apply to the container."},"className":{"type":{"name":"string"},"required":false,"description":"An optional className to apply to the container."},"controlStyle":{"type":{"name":"object"},"required":false,"description":"An optional style to apply to every `SelectionControl`. This will be merged with any `style`\nthat a `control` might have."},"controlClassName":{"type":{"name":"string"},"required":false,"description":"An optional className to apply to every `SelectionControl`. This will be merged with any\n`className` that a `control` might have."},"id":{"type":{"name":"custom","raw":"requiredByAllControls(PropTypes.oneOfType([\n  PropTypes.number,\n  PropTypes.string,\n]))"},"required":false,"description":"An optional base id to apply to each `SelectionControl`. When this is included, the id for\neach control will start with this and end with their current index. If this is ommitted,\neach `control` in the `controls` prop *must* have an `id` prop. This is required for\naccessibility."},"type":{"type":{"name":"enum","value":[{"value":"'checkbox'","computed":false},{"value":"'radio'","computed":false}]},"required":true,"description":"The type to apply to each `SelectionControl` in the group. Only `checkbox` and `radio` is\nvalid for a grouping."},"component":{"type":{"name":"union","value":[{"name":"string"},{"name":"func"}]},"required":true,"description":"The component to render the `SelectionControlGroup` in.","defaultValue":{"value":"'fieldset'","computed":false}},"label":{"type":{"name":"node"},"required":false,"description":"An optional label to display above the group of `SelectionControl`s."},"labelClassName":{"type":{"name":"string"},"required":false,"description":"An optional className to apply to the node surrounding the `label` prop.","defaultValue":{"value":"'md-subheading-1'","computed":false}},"labelComponent":{"type":{"name":"union","value":[{"name":"string"},{"name":"func"}]},"required":true,"description":"The component to render the optional `label` in.","defaultValue":{"value":"'legend'","computed":false}},"onChange":{"type":{"name":"func"},"required":false,"description":"An optional function to call when any `SelectionControl`'s `checked` state is changed\nin the group. If the `type` of the group is `radio`, the `value` of the `checked` radio\nwill be given in the callback. If the `type` of the group is `checkbox`, a comma-delimited\nstring of all `checked` checkboxes values will be given.\n\n```js\n// checkbox\nonChange('Alpha,Omega', changeEvent);\n\n// radio\nonChange('Omega', changeEvent);\n```"},"name":{"type":{"name":"custom","raw":"requiredByAllControls(PropTypes.oneOfType([\n  PropTypes.number,\n  PropTypes.string,\n]))"},"required":false,"description":"A name to use for each `SelectionControl` in the group. If the `type` of the group is\n`checkbox`, the name will be updated to be an array name so that using\n`document.querySelector('input[name=\"yourName[]\"].value` will give the comma-delimited\nstring of checked checkboxes.\n\nIt is either required to have this prop set or every `control` in the `controls` prop to\nhave the `name` prop."},"defaultValue":{"type":{"name":"union","value":[{"name":"number"},{"name":"string"}]},"required":false,"description":"The default value for the `SelectionControlGroup`. This can either be a single value\nor a comma-delimited string of checkbox values. When the `type` of the group is `radio`\nand the group is uncontrolled, it is recommened to set this prop. Otherwise the first\nvalue of the `controls` prop will be used as the defalt value."},"value":{"type":{"name":"custom","raw":"controlled(PropTypes.oneOfType([\n  PropTypes.string,\n  PropTypes.number,\n]), 'onChange')"},"required":false,"description":"An optional value to use for the `SelectionControlGroup`. This will make the component\ncontrolled and require the `onChange` prop to be defined. Like the `defaultValue`, this\ncan either be a single value or a comma-delimited list of checkbox values."},"controls":{"type":{"name":"arrayOf","value":{"name":"shape","value":{"key":{"name":"union","value":[{"name":"number"},{"name":"string"}],"required":false},"label":{"name":"node","required":true},"value":{"name":"union","value":[{"name":"string"},{"name":"number"}],"required":true}}}},"required":true,"description":"A list of objects to create the `SelectControl` components. The shape of the object\nis the `propTypes` of the `SelectionControl` component, except that `value` prop is\nnow required.\n\nThe `SelectionControl` will inherit any inheritable props from the `SelectionControlGroup`."},"inline":{"type":{"name":"bool"},"required":false,"description":"Boolean if the `SelectionControl` should be displayed inline."}},"source":"src/js/SelectionControls/SelectionControlGroup.js","component":"SelectionControlGroup"}]