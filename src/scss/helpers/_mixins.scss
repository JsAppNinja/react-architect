@import 'mixins/buttons';
@import 'mixins/colors';

/// Generates the box shadow for material design
///
/// @example scss - Basic Usage Sass
///   .paper-1 {
///     @include md-box-shadow(1);
///   }
///
///   .paper-5 {
///     @include md-box-shadow(5);
///   }
///
/// @example scss - Basic Usage CSS Output
///   .paper-1 {
///     box-shadow: 0 2px 2px 0 rgba(0, 0, 0, .14). 0 1px 5px 0 rgba(0, 0, 0, .12), 0 3px 1px -2px rgba(0, 0, 0, .2);
///   }
///
///   .paper-5 {
///     box-shadow: 0 16px 24px 2px rgba(0, 0, 0, .14), 0 6px 30px 5px rgba(0, 0, 0, .12), 0 8px 10px -5px rgba(0, 0, 0, .4);
///   }
///
/// @link https://elements.polymer-project.org/elements/paper-card?view=demo:demo/index.html&active=paper-card
/// @param {Number} elevation - The material design elevation. This should be a number from 0 - 5.
@mixin md-box-shadow($elevation) {
  @if $elevation < 0 or $elevation > 5 {
    @warn 'The elevation must be a number from 0 - 5. elevation given was `#{$elevation}`';
  } @else {
    $top-shadow-color: get-md-color(black, .14);
    $middle-shadow-color: get-md-color(black, .12);
    $bottom-shadow-color: get-md-color(black, if($elevation == 1, .2, .4));
    @if $elevation == 0 {
      box-shadow: none;
    } @else if $elevation == 1 {
      box-shadow: 0 2px 2px 0 $top-shadow-color, 0 1px 5px 0 $middle-shadow-color, 0 3px 1px -2px $bottom-shadow-color;
    } @else if $elevation == 2 {
      box-shadow: 0 4px 5px 0 $top-shadow-color, 0 1px 10px 0 $middle-shadow-color, 0 2px 4px -1px $bottom-shadow-color;
    } @else if $elevation == 3 {
      box-shadow: 0 6px 10px 0 $top-shadow-color, 0 1px 18px 0 $middle-shadow-color, 0 3px 5px -1px $bottom-shadow-color;
    } @else if $elevation == 4 {
      box-shadow: 0 8px 10px 1px $top-shadow-color, 0 3px 14px 2px $middle-shadow-color, 0 5px 5px -3px $bottom-shadow-color;
    } @else if $elevation == 5 {
      box-shadow: 0 16px 24px 2px $top-shadow-color, 0 6px 30px 5px $middle-shadow-color, 0 8px 10px -5px $bottom-shadow-color;
    }
  }
}


@mixin absolute-center($top: true, $left: false, $additional-transform: null) {
  @if $top {
    top: 50%;
  }

  @if $left {
    left: 50%;
  }

  transform: translate3d(if($left, -50%, 0), if($top, -50%, 0), 0) $additional-transform;
}

/// Generates the css for keeping an aspect ratio for the target element.
///
/// @example scss - Basic Usage Sass
///   .aspect-16-9 {
///     @include aspect-ratio();
///   }
///
/// @example scss - Basic Usage CSS Output
///   .aspect-16-9 {
///     position: relative;
///   }
///
///   .aspect-16-9:before {
///     content: '';
///     display: block;
///     padding-top: 56.25%;
///     width: 100%;
///   }
///
///   .aspect-16-9 > img {
///     bottom: 0;
///     left: 0;
///     position: absolute;
///     right: 0;
///     top: 0;
///     width: 100%;
///   }
///
/// @param {String} $target [img] - The target to force the aspect ratio on
/// @param {Number} $width [16] - The target width ratio
/// @param {Number} $height [9] - The target height ratio
@mixin aspect-ratio($target: img, $width: 16, $height: 9) {
  position: relative;

  &:before {
    content: '';
    display: block;
    padding-top: ($height / $width) * 100%;
    width: 100%;
  }

  > #{$target} {
    bottom: 0;
    left: 0;
    position: absolute;
    right: 0;
    top: 0;
    width: 100%;
  }
}


@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  } @else {
    @return $number;
  }
}

@function get-google-font-url($family: $md-font-family, $weights...) {
  $url: 'https://fonts.googleapis.com/css?family=#{$family}:';
  @if length($weights) == 0 {
    $weights: $md-font-weights;
  }

  @for $i from 1 through length($weights) {
    $weight: nth($weights, $i);
    $url: $url + $weight;

    @if $i < length($weights) {
      $url: $url + ',';
    }
  }

  @return $url;
}

@function get-google-font-icons() {
  @return 'https://fonts.googleapis.com/icon?family=Material+Icons';
}

/// Replace `$search` with `$replace` in `$string`
/// @author Hugo Giraudel
/// @link https://css-tricks.com/snippets/sass/str-replace-function
/// @param {String} $string - Initial string
/// @param {String} $search - Substring to replace
/// @param {String} $replace ('') - New value
/// @return {String} - Updated string
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

/// Gets a character at the given index from a string.
/// If the index 0, it gets the last character of the string.
/// @param {String} $string - The string to get a character from
/// @param {String} $i [0] - The index to get a character for
@function char-at($string, $i: 0) {
  $index: if($i == 0, str-length($string), $i);
  @return str-slice($string, $index, $index + 1);
}

/// Converts a font weight into the google font suffix
/// @param {Number} $font-weight - The font weight to convert
/// @return {String} the font suffix
@function get-font-suffix($font-weight) {
  @if $font-weight == 300 {
    @return '-Light';
  } @else if $font-weight == 400 {
    @return '-Regular';
  } @else if $font-weight == 500 {
    @return '-Medium';
  } @else if $font-weight == 700 {
    @return '-Bold';
  } @else {
    @warn 'The given font weight '#{$font-weight}' is not in the lookup';
  }
}

/// Creates a font face for a locally hosted google font
///
/// @example scss - Basic Usage Sass
///   @include host-google-font(Roboto, 400);
///   @include host-google-font(Roboto, 500, my-special-fonts);
///
/// @example scss - Basic Usage CSS Output
///   @font-face {
///     font-family: 'Roboto';
///     font-style: normal;
///     font-weight: 400;
///     src: local('Roboto'),
///          local('Roboto-Regular'),
///          url(/fonts/roboto/Roboto-Regular.ttf) format('truetype');
///   }
///
///   @font-face {
///     font-family: 'Roboto';
///     font-style: normal;
///     font-weight: 500;
///     src: local('Roboto'),
///          local('Roboto-Medium'),
///          url(my-sepcial-fonts/Roboto-Medium.ttf) format('truetype');
///   }
///
/// @param {String} $font-name [Roboto] - The font name to create a font face for
/// @param {Number} $font-weight [400] - The font weight of the google font
/// @param {String} $fonts-url - The url to your fonts.
@mixin host-google-font($font-name: Roboto, $font-weight: 400, $fonts-url: null) {
  $full-font-name: str-replace($font-name, ' ') + get-font-suffix($font-weight);

  $fonts-url: if($fonts-url == null, '/fonts/' + to-lower-case(str-replace($font-name, ' ', '-')), $fonts-url);
  $fonts-url: if(char-at($fonts-url) != '/', $fonts-url + '/', $fonts-url);

  @font-face {
    font-family: quote($font-name);
    font-style: normal;
    font-weight: $font-weight;

    src: local(#{quote($font-name)}), local(#{quote($full-font-name)}), url($fonts-url + $full-font-name + '.ttf') format('truetype');
  }
}

/// Hosts the material icon font library locally by declaring the font face
/// and the .material-icons css class.
///
/// @example scss - Basic Usage Sass
///   @include host-material-icons('/fonts/material-icons');
///
/// @example scss - Basic Usage CSS Output
///   @font-face {
///     font-family: 'Material Icons';
///     font-style: normal;
///     font-weight: 400;
///     src: url(/fonts/material-icons/MaterialIcons-Regular.eot');
///     src: local('Material Icons'),
///          local('MaterialIcons-Regular'),
///          url(/fonts/material-icons/MaterialIcons-Regular.woff2') format('woff2'),
///          url(/fonts/material-icons/MaterialIcons-Regular.woff') format('woff'),
///          url(/fonts/material-icons/MaterialIcons-Regular.ttf') format('truetype');
///   }
///
///   .material-icons {
///     direction: ltr;
///     display: inline-block;
///     font-family: 'Material Icons';
///     // Support for IE.
///     font-feature-settings: 'liga';
///     font-size: $md-font-icon-size;
///     // Support for Firefox.
///     -moz-osx-font-smoothing: grayscale;
///     // Support for all WebKit browsers.
///     -webkit-font-smoothing: antialiased;
///     font-style: normal;
///     font-weight: normal;
///     height: 1em;
///     letter-spacing: normal;
///     line-height: 1;
///     // Support for Safari and Chrome.
///     text-rendering: optimizeLegibility;
///     text-transform: none;
///     white-space: nowrap;
///     width: 1em;
///     word-wrap: normal;
/// 	}
///
/// @param {String} $font-url ['/fonts/material-icons'] - The path to the material icons fonts
@mixin host-material-icons($font-url: '/fonts/material-icons') {
  $icon-link: $font-url + '/MaterialIcons-Regular';
  @font-face {
    font-family: 'Material Icons';
    font-style: normal;
    font-weight: 400;
    src: url($icon-link + '.eot');
    // scss-lint:disable SpaceAfterComma
    src: local('Material Icons'),
         local('MaterialIcons-Regular'),
         url($icon-link + '.woff2') format('woff2'),
         url($icon-link + '.woff') format('woff'),
         url($icon-link + '.ttf') format('truetype');
    // scss-lint:enable SpaceAfterComma
  }

  .material-icons {
    direction: ltr;
    display: inline-block;
    font-family: 'Material Icons';
    // Support for IE.
    font-feature-settings: 'liga';
    font-size: $md-font-icon-size;
    // Support for Firefox.
    -moz-osx-font-smoothing: grayscale;
    // Support for all WebKit browsers.
    -webkit-font-smoothing: antialiased;
    font-style: normal;
    font-weight: normal;
    letter-spacing: normal;
    line-height: 1;
    // Support for Safari and Chrome.
    text-rendering: optimizeLegibility;
    text-transform: none;
    white-space: nowrap;
    word-wrap: normal;
	}
}
