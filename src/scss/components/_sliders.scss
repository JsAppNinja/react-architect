////
/// @group sliders
////

@import '../helpers/all';

/// The Side of the Thumb for the Slider.
/// @type Number
$md-slider-thumb-size: 14px;

/// The default height for the Slider's container.
/// @type Number
$md-slider-height: $md-height !default;

/// The default height for the Slider's track.
/// @type Number
$md-slider-track-height: 2px;

/// The z-index for the Slider's thumb.
/// @type Number
$md-slider-thumb-z-index: 22 !default;

/// The scale to use when the slider is active. This will be applied
/// to the `scale` transform on the thumb.
/// @type Number
$md-slider-thumb-active-scale: 1.5 !default;

/// The scale to use when the slider is disabled. This will be applied
/// to the `scale` transform on the thumb.
/// @type Number
$md-slider-thumb-disabled-scale: .75 !default;


/// This includes the react-md Sliders Component scss.
///
/// @param {Color} $primary-color [$md-primary-color] - The primary color to use for the
///     slider. This will be the non-disabled track's fill color and the non-disabled thumb's
///     color. If you are using the `dark-theme`, This value should be the primary color with
///     a `-200` suffix.
/// @param {Boolean} $light-theme [$md-light-theme] - A boolean if the application using the
///     light theme.
@mixin react-md-sliders($primary-color: $md-primary-color, $light-theme: $md-light-theme) {
  $md-slider-on-color: $primary-color;
  $md-slider-off-color: if($light-theme, rgba($md-black-base, .26), rgba($md-white-base, .3));
  $bg-color: if($light-theme, $md-white-base, $md-dark-theme-background-color);

  .md-slider-container {
    display: flex;
    flex-wrap: wrap;

    .md-icon {
      $margin: ($md-slider-height - $md-font-icon-size) / 2;

      margin-bottom: $margin;
      margin-top: $margin;
    }

    &:hover {
      cursor: pointer;
    }

    .md-text-field-container {
      margin-left: 4px;
      padding-right: 0;
    }
  }

  .md-slider-container--disabled:hover {
    cursor: initial;
  }

  .md-slider-label {
    display: block;
    width: 100%;
  }

  .md-slider-input {
    height: 0;
    position: absolute;
    visibility: hidden;
    width: 0;
    z-index: -1;
  }

  .md-slider-track {
    $center: ($md-slider-height / 2) - ($md-slider-track-height / 2);
    background: $md-slider-off-color;
    content: '';
    display: block;
    flex-grow: 1;
    flex-shrink: 0;
    height: $md-slider-track-height;
    margin-bottom: $center;
    margin-top: $center;
    position: relative;
  }

  .md-slider-track--full-width {
    @extend %full-width;
  }

  .md-slider-track--ind-left {
    margin-left: $md-default-padding;
  }

  .md-slider-track--ind-right {
    margin-right: $md-default-padding;
  }

  .md-slider-track-fill {
    background: $md-slider-on-color;
    height: $md-slider-track-height;
    left: 0;
    margin: 0;
    position: absolute;
    top: 0;
    transition-duration: $md-transition-time;
    transition-property: width;
  }

  .md-slider-track-fill--dragging {
    transition-property: none;
  }

  .md-slider-thumb {
    border-radius: 50%;
    content: '';
    display: inline-block;
    height: $md-slider-thumb-size;
    position: absolute;
    top: -(($md-slider-thumb-size / 2) - ($md-slider-track-height / 2));
    transition-duration: $md-transition-time;
    transition-property: left, transform, background;
    width: $md-slider-thumb-size;
    z-index: $md-slider-thumb-z-index;

    &:focus {
      outline: none;
    }
  }

  .md-slider-thumb--on {
    background: $md-slider-on-color;
  }

  .md-slider-thumb--active {
    transform: scale($md-slider-thumb-active-scale);
    transform-origin: center;
  }

  .md-slider-thumb--dragging {
    transition-property: transform, background;
  }

  .md-slider-thumb--disabled {
    background: $md-slider-off-color;
    transform: scale($md-slider-thumb-disabled-scale);
  }

  .md-slider-thumb--off {
    background: $bg-color;
    border: 2px solid;
    border-color: $md-slider-off-color;
    position: relative;
  }

  .md-slider-thumb--mask {
    transform: scale(1);
    z-index: -1;
  }

  .md-slider-thumb--mask-inked {
    background: rgba($primary-color, .15);
    transform: scale(3.5);
    z-index: $md-slider-thumb-z-index - 1;
  }

  .md-slider-thumb--mask-disabled {
    background: $bg-color;
    border-radius: initial;
    transform: scale(1.1);
    z-index: $md-slider-thumb-z-index - 1;
  }

  .md-slider-ind {
    display: block;
    text-align: center;
  }

  .md-slider-editor {
    text-align: right;
  }

  @media only screen and (min-width: $md-mobile-min-width) {
    .md-slider-ind {
      font-size: $md-text-field-mobile-font-size;
      margin-top: 14px;
    }
  }

  @media only screen and (min-width: $md-desktop-min-width) {
    .md-slider-ind {
      font-size: $md-text-field-desktop-font-size;
      margin-top: 16px;
    }
  }
}


/// This only modifies the colors for the Slider component.
///
/// @param {Color} $primary-color [$md-primary-color] - The primary color to use for the
///     slider. This will be the non-disabled track's fill color and the non-disabled thumb's
///     color. If you are using the `dark-theme`, This value should be the primary color with
///     a `-200` suffix.
/// @param {Boolean} $light-theme [$md-light-theme] - A boolean if the application using the
///     light theme.
@mixin md-theme-sliders($primary-color: $md-primary-color, $light-theme: $md-light-theme) {
  $md-slider-on-color: $primary-color;
  $md-slider-off-color: if($light-theme, rgba($md-black-base, .26), rgba($md-white-base, .3));
  $bg-color: if($light-theme, $md-white-base, $md-dark-theme-background-color);

  .md-slider-track,
  .md-slider-thumb--disabled {
    background: $md-slider-off-color;
  }

  .md-slider-thumb--on,
  .md-slider-track-fill {
    background: $md-slider-on-color;
  }

  .md-slider-thumb--off,
  .md-slider-thumb--disabled-mask {
    background: $bg-color;
  }

  .md-slider-thumb--off {
    border-color: $md-slider-off-color;
  }
}
