[{"description":"Lists present multiple line items vertically as a single continuous element.","methods":[],"props":{"ordered":{"type":{"name":"bool"},"required":false,"description":"Boolean if this should be an ordered list (`<ol>`) component. Otherwise, it will\nbe rendered as `<ul>`."},"className":{"type":{"name":"string"},"required":false,"description":"An optional className to apply to the list."},"subheader":{"type":{"name":"string"},"required":false,"description":"An optional subheader primaryText to use if you want the list to start\nwith a subheader."},"primarySubheader":{"type":{"name":"bool"},"required":false,"description":"A boolean if the optional subheader should be styled with the primary color."},"children":{"type":{"name":"node"},"required":false,"description":"This *should* be a list of `ListItem`, `ListItemControl`, `Divider`, or\n`Subheader`."}},"source":"src/js/Lists/List.js","component":"List"},{"description":"A component for rendering a `li` component with icons, avatars, and text.\n\nAny remaing props will be passed to the inner `ListItem` component. This\nwill allow you to use custom components such as `react-router`'s `Link`\ncomponent.","methods":[],"props":{"primaryText":{"type":{"name":"node"},"required":true,"description":"This should be the main text to display."},"secondaryText":{"type":{"name":"node"},"required":false,"description":"An optional secondary text to display below the `primaryText`. This can\nbe an additional 1 or 2 lines. The text will automatically be ellipsed\nif it spans more than one line. If the prop `threeLines` is set to true,\nthen the text will automatically be ellipsed if it spans more than two lines."},"className":{"type":{"name":"string"},"required":false,"description":"The className to apply to the `.md-list-item` component which is the\nentire container."},"style":{"type":{"name":"object"},"required":false,"description":"An optional style to apply to the `.md-list-item` component."},"tileClassName":{"type":{"name":"string"},"required":false,"description":"The className to apply to the `.md-list-tile` component."},"tileStyle":{"type":{"name":"object"},"required":false,"description":"An optional style to apply to the `.md-list-tile` component."},"leftIcon":{"type":{"name":"node"},"required":false,"description":"An optional icon to display to the left of the text."},"leftAvatar":{"type":{"name":"node"},"required":false,"description":"An optional avatar to display to the left of the text."},"rightIcon":{"type":{"name":"node"},"required":false,"description":"An optional icon to display to the left of the text."},"rightAvatar":{"type":{"name":"node"},"required":false,"description":"An optional avatar to display to the left of the text."},"component":{"type":{"name":"union","value":[{"name":"func"},{"name":"string"}]},"required":true,"description":"The component to render the `.md-list-tile` as. This can be set\nas an external component if you need additional functionality.\n\nAn example would be setting this to be `react-router`'s `Link` component\nso that it redirects on click.","defaultValue":{"value":"'div'","computed":false}},"nestedItems":{"type":{"name":"arrayOf","value":{"name":"node"}},"required":false,"description":"An optional list of `ListItem`, `ListItemControl`, `Divider`, or `Subheader`\nto use as a nested list."},"initiallyOpen":{"type":{"name":"bool"},"required":false,"description":"Boolean if the nested list should initially be displayed.","defaultValue":{"value":"false","computed":false}},"isOpen":{"type":{"name":"bool"},"required":false,"description":"Boolean if the nested list is currently open. This forces the component\nto be a controlled component."},"onExpanderClick":{"type":{"name":"func"},"required":false,"description":"The optional function to call when the nested item expander button is clicked."},"expandOnClick":{"type":{"name":"bool"},"required":false,"description":"A boolean if the nested items should be toggled if the `ListItem` is clicked\ninstead of only the expander button.","defaultValue":{"value":"true","computed":false}},"expanderIconChildren":{"type":{"name":"node"},"required":false,"description":"Any children required to render the expander icon.","defaultValue":{"value":"'keyboard_arrow_down'","computed":false}},"expanderIconClassName":{"type":{"name":"string"},"required":false,"description":"The icon className to use for the expander icon."},"onClick":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the `ListItem` is clicked."},"disabled":{"type":{"name":"bool"},"required":false,"description":"Boolean if the item is currently disabled."},"threeLines":{"type":{"name":"bool"},"required":false,"description":"Boolean if the `ListItem` should allow three lines of text including\nthe `primaryText`."}},"source":"src/js/Lists/ListItem.js","component":"ListItem"},{"description":"A `ListItemControl` component has either a `primaryAction` or a `secondaryAction`.\nThe `primaryAction` can **only** be a `Checkbox`. A `secondaryAction` can either be\na `Checkbox`, `Switch`, or a `Reorder` icon.","methods":[],"props":{"className":{"type":{"name":"string"},"required":false,"description":"An optional className to apply to the list item."},"primaryText":{"type":{"name":"string"},"required":true,"description":"The primary text to display in the item."},"secondaryText":{"type":{"name":"node"},"required":false,"description":"An optional secondary text to display below the `primaryText`. This can\nbe an additional 1 or 2 lines. The text will automatically be ellipsed\nif it spans more than one line. If the prop `threeLines` is set to true,\nthen the text will automatically be ellipsed if it spans more than two lines."},"threeLines":{"type":{"name":"bool"},"required":false,"description":"Boolean if the `ListItem` should allow three lines of text including\nthe `primaryText`.","defaultValue":{"value":"false","computed":false}},"primaryAction":{"type":{"name":"custom","raw":"(props, propName, component, ...others) => {\n  const primaryAction = props[propName];\n  const secondaryAction = props.secondaryAction;\n  if (primaryAction && !secondaryAction) {\n    return PropTypes.element(props, propName, component, ...others);\n  } else if (!primaryAction && !secondaryAction) {\n    return new Error(\n      `Missing required prop 'primaryAction' or 'secondaryAction' for the component '${component}'.`\n    );\n  } else if (primaryAction && secondaryAction) {\n    return new Error(\n      `You can not have a 'primaryAction' and a 'secondaryAction' prop for the component '${component}'.`\n    );\n  }\n\n  return null;\n}"},"required":false,"description":"The primary action element for the `ListItemControl`. This should be a `Checkbox`\ncomponent.\n\nThe custom validation will warn you about missing both a `primaryAction` and\na `secondaryAction` or if you have both a `primaryAction` and a `secondaryAction`."},"secondaryAction":{"type":{"name":"element"},"required":false,"description":"A secondary action element. This should be either a `Checkbox`, `Switch`, or a\n`Reorder` icon."}},"source":"src/js/Lists/ListItemControl.js","component":"ListItemControl"}]