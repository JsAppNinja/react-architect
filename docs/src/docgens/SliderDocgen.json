[{"description":"","methods":[],"props":{"id":{"type":{"name":"custom","raw":"(props, propName, component, ...others) => {\n  if (typeof props.label === 'undefined') {\n    return PropTypes.string(props, propName, component, ...others);\n  }\n\n  const err = PropTypes.string.isRequired(props, propName, component, ...others);\n  if (err) {\n    return new Error(\n      `The 'id' prop is required for the '${component}' when the 'label' ` +\n      'prop is defined. This will be used for the \\'htmlFor\\' prop of the label.'\n    );\n  }\n\n  return err;\n}"},"required":false,"description":"An id to use for the `Slider`. This is required if the `label` prop\nis defined."},"style":{"type":{"name":"object"},"required":false,"description":"An optional style to apply to the slider's container."},"className":{"type":{"name":"string"},"required":false,"description":"An optional className to apply to the slider's container."},"thumbStyle":{"type":{"name":"object"},"required":false,"description":"An optional style to apply to the slider's thumb."},"thumbClassName":{"type":{"name":"string"},"required":false,"description":"An optionl className to apply to the slider's thumb."},"trackStyle":{"type":{"name":"object"},"required":false,"description":"An optional style to apply to the slider's track."},"trackClassName":{"type":{"name":"string"},"required":false,"description":"An optional className to apply to the slider's track."},"trackFillStyle":{"type":{"name":"object"},"required":false,"description":"An optional style to apply to the slider's track fill."},"trackFillClassName":{"type":{"name":"string"},"required":false,"description":"An optional className to apply to the slider's track fill."},"discreteValueStyle":{"type":{"name":"object"},"required":false,"description":"An optional style to apply to a discrete slider's value."},"discreteValueClassName":{"type":{"name":"string"},"required":false,"description":"An optional className to apply to a discrete slider's value."},"defaultValue":{"type":{"name":"number"},"required":true,"description":"The default value for the slider.","defaultValue":{"value":"0","computed":false}},"min":{"type":{"name":"custom","raw":"(props, propName, component, ...others) => {\n  const err = PropTypes.number.isRequired(props, propName, component, ...others);\n  if (err) {\n    return err;\n  }\n  const min = props[propName];\n  if (min > props.value) {\n    return new Error(\n      `The 'min' prop must be less than or equal to the 'value' prop for the '${component}' but ` +\n      `received: 'min: ${min}' and 'value: ${props.value}'`\n    );\n  } else if (min > props.defaultValue) {\n    return new Error(\n      `The 'min' prop must be less than or equal to the 'defaultValue' prop for the '${component}' but ` +\n      `received: 'min: ${min}' and 'defaultValue: ${props.defaultValue}'`\n    );\n  }\n\n\n  return null;\n}"},"required":false,"description":"The min value for the slider.","defaultValue":{"value":"0","computed":false}},"max":{"type":{"name":"custom","raw":"(props, propName, component, ...others) => {\n  const err = PropTypes.number.isRequired(props, propName, component, ...others);\n  if (err) {\n    return err;\n  }\n\n  const max = props[propName];\n  if (props.min >= max) {\n    return new Error(\n      `The 'max' prop must be greater than the 'min' prop for the '${component} but ` +\n      `received: 'min: ${props.min}' and 'max: ${max}'.`\n    );\n  } else if (max < props.value) {\n    return new Error(\n      `The 'max' prop must be greater than the 'value' prop for the '${component}' but ` +\n      `received: 'max: ${max}' and 'value: ${props.value}'`\n    );\n  } else if (max < props.defaultValue) {\n    return new Error(\n      `The 'max' prop must be greater than the 'defaultValue' prop for the '${component}' but ` +\n      `received: 'max: ${max}' and 'defaultValue: ${props.defaultValue}'`\n    );\n  }\n\n  return null;\n}"},"required":false,"description":"The max value for the slider. The max value must be greater than\nthe min value.","defaultValue":{"value":"100","computed":false}},"disabled":{"type":{"name":"bool"},"required":false,"description":"Boolean if the slider is disabled."},"value":{"type":{"name":"number"},"required":false,"description":"An optional value for the slider. This will make the component controlled\nand require the `onChange` function."},"onChange":{"type":{"name":"func"},"required":false,"description":"This is called when the slider's value gets updated. The value can be updated\nby one of the following:\n\n- Clicking a section of the slider\n- Dragging the slider with the mouse\n- Touching a section of the slider.\n- Dragging the slider with touch\n- Using the text field to update the value either by typing or incrementing\n- Using the left or right arrow keys to increment/decrement the value.\n\nThe callback for this function is as follows:\n\n```js\nonChange(value, event);\n```\n\nwhere the event can either be:\n- a touch start event\n- a touch move event\n- a touch end event\n- a mouse down event\n- a mouse move event\n- a mouse up event\n- a key up event\n- a key down event"},"onDragChange":{"type":{"name":"func"},"required":false,"description":"This is only called when the user is dragging the slider with either\nthe mouse or touch.\n\nThe callback for this function is defined as:\n\n```js\nonDragChange(dragPercentage, value, (touchMove || mouseMove) event);\n```"},"leftIcon":{"type":{"name":"element"},"required":false,"description":"An optional icon or letter to place to the left of the slider.\nif you want to use a non-font icon or a letter, use the `md-slider-ind`\nclassName on your element."},"rightIcon":{"type":{"name":"element"},"required":false,"description":"An optional icon or letter to place to the right of the slider.\nif you want to use a non-font icon or a letter, use the `md-slider-ind`\nclassName on your element.\n\n> NOTE: This can not be used if the `editable` prop is true."},"label":{"type":{"name":"node"},"required":false,"description":"An optional label to display above the slider. If this prop\nis set, then an `id` must also be given."},"step":{"type":{"name":"number"},"required":true,"description":"The incremental amount when the user hits left or right with the\nkeyboard arrows, or the user hits the up or down buttons in the\neditable number text field.","defaultValue":{"value":"1","computed":false}},"editable":{"type":{"name":"custom","raw":"(props, propName, component, ...others) => {\n  if (typeof props[propName] === 'undefined') {\n    return null;\n  }\n\n  const err = PropTypes.bool.isRequired(props, propName, component, ...others);\n  if (!err && typeof props.rightIcon !== 'undefined') {\n    return new Error(\n      `The '${component}' is unable to be editable and include a 'rightIcon'.`\n    );\n  }\n\n  return err;\n}"},"required":false,"description":"Boolean if the Slider should be editable. This will place a number text field\nto the right of the slider. If this prop is set to `true`, the `rightIcon`\nprop can not be set."},"inputWidth":{"type":{"name":"union","value":[{"name":"number"},{"name":"string"}]},"required":true,"description":"The width for the number text field when the Slider is editable.","defaultValue":{"value":"40","computed":false}},"formatValue":{"type":{"name":"func"},"required":true,"description":"This is a function that is called whenever the user changes the Slider's position\nby either:\n- dragging with the mouse\n- dragging with touch\n- quick jumping with mouse\n- quick jumping with touch\n- mouse up\n- touch end\n\nBy default, this will just round the next value to a whole number.","defaultValue":{"value":"Math.round","computed":true}},"discrete":{"type":{"name":"custom","raw":"(props, propName, component, ...others) => {\n  if (typeof props[propName] === 'undefined') {\n    return null;\n  }\n\n  let err = PropTypes.bool(props, propName, component, ...others);\n  if (!err && typeof props.editable !== 'undefined') {\n    err = new Error(\n      `The '${component}' can not be 'discrete' and 'editable'. Please choose one.`\n    );\n  }\n\n  return err;\n}"},"required":false,"description":"Boolean if the slider should be discrete. This will update the slider to include a\n_balloon_ with the current value inside. It will also not allow the `Slider` to be\neditable."},"tickWidth":{"type":{"name":"union","value":[{"name":"number"},{"name":"string"}]},"required":false,"description":"","defaultValue":{"value":"3","computed":false}},"discreteTicks":{"type":{"name":"custom","raw":"(props, propName, component, ...others) => {\n  if (typeof props[propName] === 'undefined') {\n    return null;\n  }\n\n  let err = PropTypes.number(props, propName, component, ...others);\n  if (!err) {\n    const { min, max } = props;\n    const range = Math.abs(min) + Math.abs(max);\n\n    if (range % props[propName] !== 0) {\n      err = new Error(\n        `The '${propName}' must be a number divisible by the range set by the 'min' and ` +\n        `'max' props. The current range is '${range}' by including the min: '${min}' and ` +\n        `max: '${max}' values. The current value of '${propName}' is '${props[propName]}'.`\n      );\n    }\n  }\n\n  return err;\n}"},"required":false,"description":""},"discreteInkTransitionTime":{"type":{"name":"number"},"required":true,"description":"","defaultValue":{"value":"300","computed":false}}},"source":"src/js/Sliders/Slider.js","component":"Slider"}]