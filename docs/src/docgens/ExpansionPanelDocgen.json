[{"description":"The `ExpansionPanel` component needs to be used with the `ExpansionList`\ncomponent. The only reason is that the `ExpansionPanel` should really\nbe rendered as a table, but it was a bit hard to have a single component\ndynamically rendering another row when expanded. It couldn't be in the\nsame row since the expanded content might not have the same columns.","methods":[],"props":{"style":{"type":{"name":"object"},"required":false,"description":"An optional style to apply to the panel."},"className":{"type":{"name":"string"},"required":false,"description":"An optional className to apply to the panel."},"headerStyle":{"type":{"name":"object"},"required":false,"description":"An options style to apply to the panel's header content. This is the\nsection that toggles the children to be visible and label columns."},"headerClassName":{"type":{"name":"string"},"required":false,"description":"An optional className to apply to the panel's header content. This is the\nsection that toggles the children to be visible and label columns."},"contentStyle":{"type":{"name":"object"},"required":false,"description":"An optional style to applt to the element surrounding the children when expanded."},"contentClassName":{"type":{"name":"string"},"required":false,"description":"An optional className to applt to the element surrounding the children when expanded."},"label":{"type":{"name":"node"},"required":true,"description":"The main label to display in the unexpanded panel."},"secondaryLabel":{"type":{"name":"node"},"required":false,"description":"Any additional columns to display after the main label. If this is a `list`\ninstead of a singular item, they will each be formatted as a column."},"expandedSecondaryLabel":{"type":{"name":"node"},"required":false,"description":"Any additional columns to display after the main label when the panel is\nexpanded. If this is omitted, the default `secondaryLabel` will be displayed\ninstead."},"component":{"type":{"name":"union","value":[{"name":"string"},{"name":"func"}]},"required":true,"description":"The component to render the panel as.","defaultValue":{"value":"'li'","computed":false}},"children":{"type":{"name":"node"},"required":false,"description":"The content to display once the panel is toggled open."},"expanded":{"type":{"name":"bool"},"required":false,"description":"A boolean if the panel is currently expanded. This will force the component\nto be controlled and require's the `onExpandToggle` function to be defined."},"defaultExpanded":{"type":{"name":"bool"},"required":true,"description":"Boolean if an uncontrolled panel should be expanded by default.","defaultValue":{"value":"false","computed":false}},"expandIconChildren":{"type":{"name":"node"},"required":false,"description":"Any children required to render the expand icon.","defaultValue":{"value":"'keyboard_arrow_down'","computed":false}},"expandIconClassName":{"type":{"name":"string"},"required":false,"description":"The icon className to use to render the expand icon."},"focused":{"type":{"name":"bool"},"required":true,"description":"Boolean if the `ExpansionPanel` is currently tab focused. This is injected\nand managed by the `ExpansionList` component. Do not set yourself.","defaultValue":{"value":"false","computed":false}},"columnWidths":{"type":{"name":"arrayOf","value":{"name":"number"}},"required":true,"description":"A list of min-widths to apply to each column in the panel header. This is injected\nand managed by the `ExpansionList` component. Do not set yourself.","defaultValue":{"value":"[]","computed":false}},"onExpandToggle":{"type":{"name":"custom","raw":"(props, propName, component, ...others) => {\n  if (typeof props.expanded !== 'undefined') {\n    return PropTypes.func.isRequired(props, propName, component, ...others);\n  } else {\n    return PropTypes.func(props, propName, component, ...others);\n  }\n}"},"required":false,"description":"A function to call when the expansion panel's expanded state is toggled.\nThe callback for this function will include the new expanded state.\n\n`onExpandToggle(expanded)`"},"onSave":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the Save button is clicked on the expanded panel."},"onCancel":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the Cancel button is clicked on the expanded panel."},"closeOnSave":{"type":{"name":"bool"},"required":false,"description":"Boolean if the panel should close when the Save button is clicked.","defaultValue":{"value":"true","computed":false}},"closeOnCancel":{"type":{"name":"bool"},"required":false,"description":"Boolean if the panel should close when the Cancel button is clicked.","defaultValue":{"value":"true","computed":false}},"saveType":{"type":{"name":"enum","value":[{"value":"'button'","computed":false},{"value":"'submit'","computed":false},{"value":"'reset'","computed":false}]},"required":false,"description":"An optional button type to apply to the Save button. This will get\npassed to the `FlatButton`."},"saveLabel":{"type":{"name":"string"},"required":true,"description":"The label for the Save button.","defaultValue":{"value":"'Save'","computed":false}},"savePrimary":{"type":{"name":"bool"},"required":false,"description":"Boolean if the Save button should be styled with the primary color.","defaultValue":{"value":"true","computed":false}},"saveSecondary":{"type":{"name":"bool"},"required":false,"description":"Boolean if the Save button should be styled with the secondary color,"},"cancelType":{"type":{"name":"enum","value":[{"value":"'button'","computed":false},{"value":"'submit'","computed":false},{"value":"'reset'","computed":false}]},"required":false,"description":"An optional button type to apply to the Cancel button. This will get\npassed to the `FlatButton`."},"cancelLabel":{"type":{"name":"string"},"required":true,"description":"The label for the Cancel button.","defaultValue":{"value":"'Cancel'","computed":false}},"cancelPrimary":{"type":{"name":"bool"},"required":false,"description":"Boolean if the Cancel button should be styled with the primary color,"},"cancelSecondary":{"type":{"name":"bool"},"required":false,"description":"Boolean if the Cancel button should be styled with the secondary color,"},"tabIndex":{"type":{"name":"number"},"required":true,"description":"The tab index for the panel's header. This allows keyboard navigation.","defaultValue":{"value":"0","computed":false}}},"source":"src/js/ExpansionPanels/ExpansionPanel.js","component":"ExpansionPanel"},{"description":"The `ExpansionList` component is a wrapper for the `ExpansionPanel` that helps\ndetermine which `ExpansionPanel` currently has tab focus and adjusts the column\nsizes in the header of the `ExpansionPanel`.\n\nThe `ExpansionList` and `ExpansionPanel` components should have probably been\nimplemented as a `table` insead of a `ul || ol` since it is more column based,\nbut it would complicate the API to have dynamic row generation for the expanded\npanels. The expanded panels _might_ not follow the same column widths as their labels\nso a singular row with a div for expanded content might not work correctly.","methods":[],"props":{"style":{"type":{"name":"object"},"required":false,"description":"An optional style object to apply to the list."},"className":{"type":{"name":"string"},"required":false,"description":"An optional className to apply to the list."},"children":{"type":{"name":"node"},"required":false,"description":"The children should be a list or singular `ExpansionPanel` component\nto render with some additional props injected."},"component":{"type":{"name":"union","value":[{"name":"string"},{"name":"func"}]},"required":true,"description":"The component to render the list as.","defaultValue":{"value":"'ul'","computed":false}}},"source":"src/js/ExpansionPanels/ExpansionList.js","component":"ExpansionList"}]