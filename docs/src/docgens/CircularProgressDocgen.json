[{"description":"The `CircularProgress` component is used to give visual feedback while your app\nis loading.\n\nThere are two different types of circular progress bars: `Determinate` and `Indeterminate`.\n\nA `Determinate` circular progress bar should be used when you want to keep track of the current\nprogress. An example would be downloading a file.\n\nAn `Indeterminate` circular progress bar should be used when you can not keep track of the progress\nyourself. An example would be waiting for some API call to complete.","methods":[],"props":{"style":{"type":{"name":"object"},"required":true,"description":"A style object to apply to the svg. If this is a determinate `CircularProgress`,\nthe `transform` (and vendor prefixes) styles will be merged with the current\nprogress rotation.","defaultValue":{"value":"{}","computed":false}},"className":{"type":{"name":"string"},"required":false,"description":"An optional className to apply to the svg."},"value":{"type":{"name":"custom","raw":"(props, propName, component, ...others) => {\n  if(typeof props[propName] === 'undefined') { return; }\n  let err = PropTypes.number(props, propName, component, ...others);\n  if(!err) {\n    const value = props[propName];\n    if(!isBetween(value, 0, 100)) {\n      err = new Error(`A determinate '${component}' was given a value '${value}'. The 'value' prop should be between 0 and 100`);\n    }\n  }\n\n  return err;\n}"},"required":false,"description":"The current value of the progress. If this value is defined, it will\nbe converted to a determinate circular progress. The progress will not\nadvance unless this value changes.\n\nThis value should also be a number between 0 and 100."},"scale":{"type":{"name":"number"},"required":true,"description":"The scale for the circular progress.","defaultValue":{"value":"1","computed":false}},"determinateDashoffset":{"type":{"name":"number"},"required":true,"description":"You probably don't want to update this. I'm not good at svg. This should\nmatch the scss variable `$md-circular-progress-stroke-dashoffset`.","defaultValue":{"value":"187","computed":false}},"centered":{"type":{"name":"bool"},"required":false,"description":"Boolean if the the progress should be centered in it's container.","defaultValue":{"value":"true","computed":false}}},"source":"src/js/Progress/CircularProgress.js","component":"CircularProgress"}]