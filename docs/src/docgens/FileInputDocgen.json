[{"description":"The `FileInput` component is used as simple styling for the `<input type=\"file\" />`.\nIt will style the input as a raised button by default.","methods":[],"props":{"style":{"type":{"name":"object"},"required":false,"description":"An optional style to apply."},"className":{"type":{"name":"string"},"required":false,"description":"An optional className to apply."},"primary":{"type":{"name":"bool"},"required":false,"description":"Boolean if the `FileInput` should be styled with the primary color."},"secondary":{"type":{"name":"bool"},"required":false,"description":"Boolean if the `FileInput` should be styled with the secondary color."},"flat":{"type":{"name":"bool"},"required":false,"description":"Boolean if the `FileInput` should be styled as a flat button instead of a\nraised button."},"accept":{"type":{"name":"string"},"required":false,"description":"This should be a comma separated list of Media Types that the `FileInput` can\naccept. If this prop is left blank, any file will be accepted.\n\nThe values can either be:\n- A file extension\n- audio/*\n- video/*\n- image/*\n- any valid [IANA Media Type](http://www.iana.org/assignments/media-types/media-types.xhtml)"},"multiple":{"type":{"name":"bool"},"required":false,"description":"Boolean if multiple files will be accepted."},"label":{"type":{"name":"string"},"required":true,"description":"A label to display on the `FileInput` when no files have been selected.","defaultValue":{"value":"'Select a file from your computer'","computed":false}},"iconChildren":{"type":{"name":"node"},"required":false,"description":"The icon children to use for the upload icon.","defaultValue":{"value":"'file_upload'","computed":false}},"iconClassName":{"type":{"name":"string"},"required":false,"description":"The icon className to use for the upload icon."},"onChange":{"type":{"name":"func"},"required":true,"description":"A function to call when the value of the input changes. This will\nbe triggered when the user selects a new file or cancels the new file selection.\n\nThis function will be given the new [FileList](https://developer.mozilla.org/en-US/docs/Web/API/FileList)\nas an array and the change event. If this is not a multiple file input, only the\nnewly selected File will be given instead of a list of one file. Since this is an\n`input` tag, the user will not be able to select the same file multiple times unless\nyou manually clear the input's value.\n\n> NOTE: If the user hits cancel, null will be given for a single file input.\n\n```js\nonChange(files, e);\n```"},"ink":{"type":{"name":"node"},"required":false,"description":"Injected from `injectInk`"},"id":{"type":{"name":"string"},"required":false,"description":"An optional id for the file input field."}},"source":"src/js/FileInputs/FileInput.js","component":"FileInput"},{"description":"The `FileUpload` component is used to upload files locally. If you want\nto upload files to a server, use [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData)\nby attaching the `File`.\n\nQuick example:\n\n```js\nfunction upload(file) {\n  fetch('/api/images', {\n    method: 'POST',\n    body: new FormData().append('file', file),\n  });\n}\n```\n\nAn upload can be aborted by calling the `abort(file || fileName)` function. If\nthe file or fileName are ommitted, it will *attempt* to abort the current\nfile that is uploading. Unreliable for multiselect.\n\n```js\n<FileUpload ref=\"upload\" />\n<RaisedButton onClick={() => this.refs.upload.abort()} label=\"Abort! Abort!\" />\n```","methods":[{"name":"abort","docblock":"Attempts to abort the upload of a file. This function takes an optional `file` or `fileName`\nas it's parameter. If the parameter is omitted, it attempts to abort the first file that was\nadded. If the `onAbort` function was given, it will be called as well.\n\n@param {Object|string=} file - The file or the file name to use to find the\n    correct `FileReader`.","modifiers":[],"params":[{"name":"file","description":"The file or the file name to use to find the\n    correct `FileReader`.","type":{},"optional":true}],"returns":null,"description":"Attempts to abort the upload of a file. This function takes an optional `file` or `fileName`\nas it's parameter. If the parameter is omitted, it attempts to abort the first file that was\nadded. If the `onAbort` function was given, it will be called as well."}],"props":{"style":{"type":{"name":"object"},"required":false,"description":"An optional style to apply."},"className":{"type":{"name":"string"},"required":false,"description":"An optional className to apply."},"primary":{"type":{"name":"bool"},"required":false,"description":"Boolean if the `FileInput` should be styled with the primary color."},"secondary":{"type":{"name":"bool"},"required":false,"description":"Boolean if the `FileInput` should be styled with the secondary color."},"flat":{"type":{"name":"bool"},"required":false,"description":"Boolean if the `FileInput` should be styled as a flat button instead of a\nraised button."},"accept":{"type":{"name":"string"},"required":false,"description":"This should be a comma separated list of Media Types that the `FileInput` can\naccept. If this prop is left blank, any file will be accepted.\n\nThe values can either be:\n- A file extension\n- audio/*\n- video/*\n- image/*\n- any valid [IANA Media Type](http://www.iana.org/assignments/media-types/media-types.xhtml)"},"multiple":{"type":{"name":"bool"},"required":false,"description":"Boolean if multiple files will be accepted."},"label":{"type":{"name":"string"},"required":false,"description":"A label to display on the `FileInput`."},"iconChildren":{"type":{"name":"node"},"required":false,"description":"The icon children to use for the upload icon."},"iconClassName":{"type":{"name":"string"},"required":false,"description":"The icon className to use for the upload icon."},"maxSize":{"type":{"name":"number"},"required":false,"description":"An optional max size for the file. If the file is greater than\nthis limit, the file will not be uploaded."},"onSizeError":{"type":{"name":"custom","raw":"(props, propName, component, ...others) => {\n  if (typeof props.maxSize === 'number') {\n    return PropTypes.func.isRequired(props, propName, component, ...others);\n  }\n\n  return null;\n}"},"required":false,"description":"A required function to call when the `maxSize` prop is set. It will\nbe given a list of files that were too big."},"readAs":{"type":{"name":"union","value":[{"name":"enum","value":[{"value":"'DataURL'","computed":false},{"value":"'ArrayBuffer'","computed":false},{"value":"'Text'","computed":false}]},{"name":"func"}]},"required":false,"description":"You can force the `FileReader` to read the file as a specific type\nif you do not trust the *amazing* regex I have for choosing the correct\none.\n\n```js\nif(type.match(/image|video|audio/)) {\n  fr.readAsDataURL(file);\n} else if(type.match(/application|model|multipart/)) {\n  fr.readAsArrayBuffer(file);\n} else {\n  fr.readAsText(file);\n}\n```\n\n> `.yml` and `.js` both are considered `application`, so it definitely fails there.\n\nIf this prop is a function, you will be given the file's type, the file object, and\nthe file reader. You will then need to call `fileReader.readAsYOUR_CORRECT_TYPE(file)`."},"onAbort":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the `FileUpload` aborts. The current\nfile and the abort event are given. This might not be the most useful\nfunction to use since you will need to manually call abort yourself anyways."},"onError":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the `FileUpload` errors. The current\nfile, the error, and the error event are given.\n\n```js\nonError(file, event.target.error, event);\n```"},"onLoad":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the `FileUpload` loads. The current\nfile, the load result, and the load event are given.\n\n```js\nonLoad(file, event.target.result, event);\n```\n\nThe load result will either be:\n- a data url\n- a plain text string\n- an array buffer\n\ndepending on what type the file is."},"onLoadStart":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the `FileUpload` starts loading. The current\nfile and the load start event are given."},"onLoadEnd":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the `FileUpload` finishes loading. The\ncurrent file and the load end event are given."},"onProgress":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the `FileUpload` progress. The current\nfile, upload progress, and the progress event are given. The progress\nwill be a number between 0 and 100 that has not been rounded.\n\n```js\nonProgress(file, progress, event);\n```"},"onChange":{"type":{"name":"func"},"required":false,"description":"An optional function to call when a file selects or unselects a file.\nThis will be called before any local uploading occurs.\n\n```js\nonChange(file(s) || null, event);\n```"}},"source":"src/js/FileInputs/FileUpload.js","component":"FileUpload"}]