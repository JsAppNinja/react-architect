[{"description":"The `Autocomplete` component is useful for presenting real-time suggestions, completions,\nor filtering.","methods":[{"name":"caseInsensitiveFilter","docblock":null,"modifiers":["static"],"params":[{"name":"haystack","type":null},{"name":"filterText","type":null},{"name":"dataLabel","type":null}],"returns":null},{"name":"fuzzyFilter","docblock":null,"modifiers":["static"],"params":[{"name":"haystack","type":null},{"name":"needle","type":null},{"name":"dataLabel","type":null}],"returns":null},{"name":"findIgnoreCase","docblock":null,"modifiers":["static"],"params":[{"name":"haystack","type":null},{"name":"value","type":null},{"name":"dataLabel","type":null}],"returns":null}],"props":{"style":{"type":{"name":"object"},"required":false,"description":"An optional style to apply to the `Autocomplete`'s text field's container."},"className":{"type":{"name":"string"},"required":false,"description":"An optional className to apply to the `Autocomplete`'s text field's container."},"containerStyle":{"type":{"name":"object"},"required":false,"description":"An optional style to apply to the `Autocomplete`'s container."},"containerClassName":{"type":{"name":"string"},"required":false,"description":"An optional className to apply to the `Autocomplete`'s container."},"inputStyle":{"type":{"name":"object"},"required":false,"description":"An optional style to apply to the `Autocomplete`'s text field input itself."},"inputClassName":{"type":{"name":"string"},"required":false,"description":"An optional className to apply to the `Autocomplete`'s input field iteself."},"listClassName":{"type":{"name":"string"},"required":false,"description":"The optional className to apply to the opened menu List if the\n`Autocomplete` is not using `inline` suggestions."},"listStyle":{"type":{"name":"object"},"required":false,"description":"The optional style to apply to the opened menu List if the\n`Autocomplete` is not using `inline` suggestions."},"floatingLabel":{"type":{"name":"bool"},"required":true,"description":"Boolean if the label for the text field should be floating.","defaultValue":{"value":"true","computed":false}},"disabled":{"type":{"name":"bool"},"required":false,"description":"Boolean if the autocomplete is disabled."},"label":{"type":{"name":"string"},"required":false,"description":"A label to display with the autocomplete."},"value":{"type":{"name":"custom","raw":"(props, propName, component, ...others) => {\n  let err;\n  if(typeof props[propName] !== 'undefined') {\n    err = PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ])(props, propName, component, ...others);\n\n    if(!err) {\n      err = PropTypes.func.isRequired(props, 'onChange', component, ...others);\n    }\n  }\n\n  return err;\n}"},"required":false,"description":"An optional value to use for the text field. This will force this component\nto be controlled and require the `onChange` function."},"defaultValue":{"type":{"name":"string"},"required":true,"description":"The default value for the autocomplete's text field.","defaultValue":{"value":"''","computed":false}},"dataLabel":{"type":{"name":"string"},"required":true,"description":"An object key to use to extract the text to be compared for filtering.\nThis will only be applied if the the given `data` prop is an array of objects.","defaultValue":{"value":"'primaryText'","computed":false}},"dataValue":{"type":{"name":"string"},"required":false,"description":"An optional object key to use to extract the `value` of the given `data` prop.\nThis is really only used with generating a unique react key. The unique react\nkey with either be:\n- the datum if it is a string or number\n- the `key` attribute of the datum object\n- the `datum[dataValue]`\n- or the `datum[dataLabel]`"},"data":{"type":{"name":"custom","raw":"(props, propName, component, ...others) => {\n  const { dataLabel } = props;\n  return PropTypes.arrayOf(PropTypes.oneOfType([\n    PropTypes.element,\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.shape({\n      [dataLabel]: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number,\n      ]).isRequired,\n    }),\n  ])).isRequired(props, propName, component, ...others);\n}"},"required":false,"description":"The data that will be used for autocomplete suggestions. This can either be\nan array of string, number, or object. If it is an array of objects, the key\n`dataLabel` is required.\n\n```js\nPropTypes.shape({\n  [dataLabel]: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n  ]).isRequired,\n}),\n```"},"filter":{"type":{"name":"func"},"required":false,"description":"An optional function to use to filter the `data`. If you have a sexy backend\nusing solr or some other seach/indexer, it is recommended to set this prop to\n`null` or `false`-ish.","defaultValue":{"value":"Autocomplete.fuzzyFilter","computed":true}},"onKeyDown":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the `Autocomplete`'s text field has a `keydown` event."},"onMouseDown":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the `Autocomplete`'s text field has a `mousedown` event."},"onChange":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the `Autocomplete`'s text field value changes.\nThe callback will be given the new value and the change event.\n\n`onChange(textFeldValue, event)`"},"onFocus":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the `Autocomplete`'s text field is focused."},"onBlur":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the entire `Autocomplete` component is blurred.\nThis will be triggered when the window is clicked or when a user tabs away from\nthe autocomplete."},"block":{"type":{"name":"bool"},"required":false,"description":"Boolean if this text field should be styled as a full width text field.\nFloating labels and the text field indicator will be removed automatically."},"fullWidth":{"type":{"name":"bool"},"required":false,"description":"Boolean if the autocomplete should span the entire width."},"inline":{"type":{"name":"bool"},"required":false,"description":"Boolean if the `Autocomplete` should display suggestions inline instead\nof in a `Menu`."},"findInlineSuggestion":{"type":{"name":"func"},"required":false,"description":"The function to call to find a suggestion for an inline autocomplete. This function\nexpects to return a single result of a number or a string.\n\n```js\n@param {Array<Object|String|Number>} data - The data prop to search.\n@param {String} value - The current value to use for searching.\n@param {String} dataLabel - The `dataLabel` prop to use if a datum is an object.\n@return {String|Number} the found suggestion or false-ish\n```","defaultValue":{"value":"Autocomplete.findIgnoreCase","computed":true}},"onAutocomplete":{"type":{"name":"func"},"required":false,"description":"An optional function to call when an autocomplete suggestion is clicked either\nby using the mouse, the enter/space key, or touch. The match index and current\n`dataLabel` will be given back.\n\n`onAutocomplete(suggestion[dataLabel] || suggestion, suggestionIndex);`"},"clearOnAutocomplete":{"type":{"name":"bool"},"required":false,"description":"A boolean if the text field's value should be reset to the empty string when\nan item is auto-completed. This is usefull if you do not want a fully controlled\ncomponent and the values are stored outside of the `TextField`. (like `Chips`)."},"onMenuOpen":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the `Autocomplete` suggestion menu opens."},"onMenuClose":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the `Autocomplete` suggestion menu closes."}},"source":"src/js/Autocompletes/Autocomplete.js","component":"Autocomplete"}]