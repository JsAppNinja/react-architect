{"version":3,"sources":["../../src/js/Slider/Slider.js"],"names":[],"mappings":"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","file":"Slider.js","sourcesContent":["import React, { Component, PropTypes } from 'react';\nimport PureRenderMixin from 'react-addons-pure-render-mixin';\n\nconst LEFT_MOUSE = 2;\n\nexport default class Slider extends Component {\n  constructor(props) {\n    super(props);\n\n    this.shouldComponentUpdate = PureRenderMixin.shouldComponentUpdate.bind(this);\n    this.state = {\n      value: typeof props.defaultValue === 'number' ? props.defaultValue : props.min,\n    };\n  }\n\n  static propTypes = {\n    min: PropTypes.number,\n    max: PropTypes.number,\n    step: PropTypes.number,\n    onDragStart: PropTypes.func,\n    onDragEnd: PropTypes.func,\n    defaultValue: PropTypes.number,\n    snap: PropTypes.bool,\n    sliderLeft: PropTypes.node,\n    sliderRight: PropTypes.node,\n  }\n\n  static defaultProps = {\n    min: 0,\n    max: 100,\n  }\n\n  handleTrackClick = (e) => {\n    if(e.button === LEFT_MOUSE) { return; }\n\n    this.setState({ value: this.calculateBallMovedDistance(e) });\n  }\n\n  render() {\n    const { min, max, sliderLeft, sliderRight } = this.props;\n    const { value } = this.state;\n    const width = `${this.calculateTrackWidth()}%`;\n\n    return (\n      <div className=\"md-slider-container\">\n        {sliderLeft && <div className=\"md-slider-left\">{sliderLeft}</div>}\n        <div className=\"md-slider\">\n          <input type=\"range\" className=\"md-hidden-slider\" readOnly value={value} min={min} max={max} />\n          <div className=\"md-slider-track\" ref=\"track\" onClick={this.handleTrackClick}>\n            <div className=\"md-track\" />\n            <div className=\"md-track md-track-active\" style={{ width: width }} />\n          </div>\n          <div className=\"md-slider-ball\" style={{ left: width }}>\n            <div className=\"md-ball\" />\n            <div className=\"md-ball-value\">{value}</div>\n          </div>\n        </div>\n        {sliderRight && <div className=\"md-slider-right\">{sliderRight}</div>}\n      </div>\n    );\n  }\n\n  /**\n   * Calculates the slider's track current width by comparing the value\n   * to the min and max values. It's width is the current value percentage\n   */\n  calculateTrackWidth = () => {\n    const { min, max } = this.props;\n    const { value } = this.state;\n\n    if(value === min) {\n      return 0;\n    } else if(value === max) {\n      return 100;\n    } else {\n      return ((value - min) / (max - min)) * 100;\n    }\n  }\n\n  /**\n   * Gets the current left position of the slider's track on the entire page\n   */\n  getTrackLeft = () => {\n    return this.refs.track.getBoundingClientRect().left;\n  }\n\n  calculateBallMovedDistance = (e) => {\n    const { min, max, step } = this.props;\n    const trackWidth = this.refs.track.clientWidth;\n    const trackDistance = Math.min(trackWidth, Math.max(0, e.clientX - this.getTrackLeft()));\n    if(trackDistance === 0) {\n      return min;\n    } else if(trackDistance === trackWidth) {\n      return max;\n    }\n\n    const ballMovedDistance = trackDistance / trackWidth * max;\n    if(step) {\n      return this.calculateStepDistance(ballMovedDistance);\n    } else {\n      return ballMovedDistance;\n    }\n  }\n\n  calculateStep = (ballMovedDistance) => {\n    const { min, max, step } = this.props;\n  }\n}\n"]}