{"version":3,"sources":["../../src/js/Button/IconButton.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAOM,UAAU;YAAV,UAAU;;AACd,WADI,UAAU,CACF,KAAK,EAAE;0BADf,UAAU;;uEAAV,UAAU,aAEN,KAAK;;AAEX,UAAK,qBAAqB,GAAG,qCAAgB,qBAAqB,CAAC,IAAI,OAAM,CAAC;AAC9E,UAAK,KAAK,GAAG,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC;;GACtC;;eANG,UAAU;;6BAuBL;mBAC8D,IAAI,CAAC,KAAK;UAAvE,aAAa,UAAb,aAAa;UAAE,QAAQ,UAAR,QAAQ;UAAE,SAAS,UAAT,SAAS;UAAE,IAAI,UAAJ,IAAI;UAAE,IAAI,UAAJ,IAAI;;UAAK,KAAK;;AAChE,UAAI,QAAQ,gBACP,KAAK;AACR,iBAAS,EAAE,0BAAW,SAAS,EAAE,QAAQ,EAAE,aAAa,CAAC;QAC1D,CAAC;;AAEF,UAAG,IAAI,EAAE;AACP,gBAAQ,CAAC,IAAI,GAAG,IAAI,CAAC;OACtB,MAAM;AACL,gBAAQ,CAAC,IAAI,GAAG,IAAI,CAAC;OACtB;AACD,aAAO,gBAAM,aAAa,CAAC,IAAI,GAAG,GAAG,GAAG,QAAQ,EAAE,QAAQ,EACxD;;UAAU,aAAa,EAAE,aAAa,AAAC;QAAE,QAAQ;OAAY,CAC7D,CAAC;KACJ;;;SAtCG,UAAU;UAPA,SAAS;;AAOnB,UAAU,CAQP,SAAS,GAAG;AACjB,eAAa,EAAE,OAhBQ,SAAS,CAgBP,MAAM;AAC/B,WAAS,EAAE,OAjBY,SAAS,CAiBX,MAAM;AAC3B,UAAQ,EAAE,OAlBa,SAAS,CAkBZ,IAAI;AACxB,SAAO,EAAE,OAnBc,SAAS,CAmBb,IAAI;AACvB,iBAAe,EAAE,OApBM,SAAS,CAoBL,MAAM;AACjC,SAAO,EAAE,OArBc,SAAS,CAqBb,MAAM;AACzB,MAAI,EAAE,OAtBiB,SAAS,CAsBhB,MAAM;AACtB,MAAI,EAAE,OAvBiB,SAAS,CAuBhB,MAAM;CACvB;AAjBG,UAAU,CAmBP,YAAY,GAAG;AACpB,MAAI,EAAE,QAAQ;CACf;kBAoBY,cA3CN,eAAe,EA2CO,IAAI,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC","file":"IconButton.js","sourcesContent":["import React, { Component, PropTypes } from 'react';\nimport PureRenderMixin from 'react-addons-pure-render-mixin';\nimport classnames from 'classnames';\n\nimport FontIcon from '../FontIcon';\nimport { rippleComponent } from '../utils/Wrappers';\n\nclass IconButton extends Component {\n  constructor(props) {\n    super(props);\n\n    this.shouldComponentUpdate = PureRenderMixin.shouldComponentUpdate.bind(this);\n    this.state = { mouseDownTime: null };\n  }\n\n  static propTypes = {\n    iconClassName: PropTypes.string,\n    className: PropTypes.string,\n    children: PropTypes.node,\n    onClick: PropTypes.func,\n    tooltipPosition: PropTypes.string,\n    tooltip: PropTypes.string,\n    href: PropTypes.string,\n    type: PropTypes.string,\n  }\n\n  static defaultProps = {\n    type: 'button',\n  }\n\n  render() {\n    const { iconClassName, children, className, href, type, ...props } = this.props;\n    let btnProps = {\n      ...props,\n      className: classnames(className, 'md-btn', 'md-btn-icon'),\n    };\n\n    if(href) {\n      btnProps.href = href;\n    } else {\n      btnProps.type = type;\n    }\n    return React.createElement(href ? 'a' : 'button', btnProps, (\n      <FontIcon iconClassName={iconClassName}>{children}</FontIcon>\n    ));\n  }\n}\n\nexport default rippleComponent(true, 1)(IconButton);\n"]}