{"version":3,"sources":["../../src/js/Lists/List.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAOqB,IAAI;YAAJ,IAAI;;AACvB,WADmB,IAAI,CACX,KAAK,EAAE;0BADA,IAAI;;uEAAJ,IAAI,aAEf,KAAK;;AAEX,UAAK,qBAAqB,GAAG,qCAAgB,qBAAqB,CAAC,IAAI,OAAM,CAAC;;GAC/E;;eALkB,IAAI;;6BAgBd;mBAC8C,IAAI,CAAC,KAAK;UAAvD,SAAS,UAAT,SAAS;UAAE,SAAS,UAAT,SAAS;UAAE,QAAQ,UAAR,QAAQ;;UAAK,KAAK;;AAChD,UAAI,WAAW,GAAG,QAAQ,CAAC;AAC3B,UAAG,SAAS,EAAE;AACZ,mBAAW,GAAG,CAAC,yDAAe,OAAO,EAAE,eAvBpC,aAAa,EAuBqC,KAAK,EAAE,kBAAkB,CAAC,AAAC,EAAC,WAAW,EAAE,SAAS,AAAC,GAAG,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;OAC/H;;AAED,aAAO,gBAAM,aAAa,CAAC,eA1BtB,aAAa,EA0BuB,KAAK,EAAE,SAAS,CAAC,GAAG,IAAI,GAAG,IAAI,EAAE;AACxE,iBAAS,EAAE,0BAAW,SAAS,EAAE,SAAS,EAAE,EAAE,cAAc,EAAE,eA3B3D,aAAa,EA2B4D,KAAK,EAAE,UAAU,CAAC,EAAE,CAAC;OAClG,EAAE,gBAAM,QAAQ,CAAC,GAAG,CAAC,WAAW,EAAE,UAAC,KAAK,EAAE,CAAC,EAAK;AAC/C,YAAG,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE;AAC1B,cAAM,SAAS,GAAG,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;AAClC,cAAG,SAAS,CAAC,IAAI,IAAI,SAAS,CAAC,IAAI,CAAC,IAAI,KAAK,aAAa,EAAE;AAC1D,mBAAO,gBAAM,YAAY,CAAC,KAAK,EAAE,EAAE,SAAS,EAAE,0BAAW,KAAK,CAAC,KAAK,CAAC,SAAS,EAAE,UAAU,CAAC,EAAE,CAAC,CAAC;WAChG;SACF;AACD,eAAO,KAAK,CAAC;OACd,CAAC,CAAC,CAAC;KACL;;;SAlCkB,IAAI;UAPT,SAAS;;AAOJ,IAAI,CAOhB,SAAS,GAAG;AACjB,SAAO,EAAE,OAfc,SAAS,CAeb,IAAI;AACvB,WAAS,EAAE,OAhBY,SAAS,CAgBX,MAAM;AAC3B,WAAS,EAAE,OAjBY,SAAS,CAiBX,MAAM;AAC3B,kBAAgB,EAAE,OAlBK,SAAS,CAkBJ,IAAI;AAChC,UAAQ,EAAE,OAnBa,SAAS,CAmBZ,IAAI;AACxB,UAAQ,EAAE,OApBa,SAAS,CAoBZ,IAAI;CACzB;kBAdkB,IAAI","file":"List.js","sourcesContent":["import React, { Component, PropTypes } from 'react';\nimport PureRenderMixin from 'react-addons-pure-render-mixin';\nimport classnames from 'classnames';\n\nimport { isPropEnabled } from '../utils/PropUtils';\nimport ListSubheader from './ListSubheader';\n\nexport default class List extends Component {\n  constructor(props) {\n    super(props);\n\n    this.shouldComponentUpdate = PureRenderMixin.shouldComponentUpdate.bind(this);\n  }\n\n  static propTypes = {\n    ordered: PropTypes.bool,\n    className: PropTypes.string,\n    subheader: PropTypes.string,\n    primarySubheader: PropTypes.bool,\n    children: PropTypes.node,\n    textOnly: PropTypes.bool,\n  }\n\n  render() {\n    const { className, subheader, children, ...props } = this.props;\n    let allChildren = children;\n    if(subheader) {\n      allChildren = [<ListSubheader primary={isPropEnabled(props, 'primarySubheader')} primaryText={subheader} />].concat(children);\n    }\n\n    return React.createElement(isPropEnabled(props, 'ordered') ? 'ol' : 'ul', {\n      className: classnames('md-list', className, { 'md-text-list': isPropEnabled(props, 'textOnly') }),\n    }, React.Children.map(allChildren, (child, i) => {\n      if(i + 1 < children.length) {\n        const nextChild = children[i + 1];\n        if(nextChild.type && nextChild.type.name === 'ListDivider') {\n          return React.cloneElement(child, { className: classnames(child.props.className, 'extra-mb') });\n        }\n      }\n      return child;\n    }));\n  }\n}\n"]}